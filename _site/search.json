[
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "pacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"C:/calvintansh/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex03-2/data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;% # mutate(across())\n  mutate(Year = as.integer(Year))\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(10,600),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers',\n          colorscale = \"Turbo\"\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, animated data visualisation will be created using gganimate and plotly r packages. At the same time, data (i) reshaped by using tidyr package, and (ii) processed, wrangled and transformed with dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot to convey motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it is important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nDoes it make sense to go through the effort of making animated graphs?\n\n\n\nBefore making animated graphs, think of the above question first.\n\nAn animated graphic may not be worth the time investment for just exploratory data analysis.\nHowever, in a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#overview",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, animated data visualisation will be created using gganimate and plotly r packages. At the same time, data (i) reshaped by using tidyr package, and (ii) processed, wrangled and transformed with dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot to convey motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it is important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nDoes it make sense to go through the effort of making animated graphs?\n\n\n\nBefore making animated graphs, think of the above question first.\n\nAn animated graphic may not be worth the time investment for just exploratory data analysis.\nHowever, in a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#getting-started",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2.2 Getting Started",
    "text": "3-2.2 Getting Started\n\n3-2.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: An R library for plotting interactive statistical graphs\ngganimate: A ggplot extension for creating animated statistical graphs\ngifski: Converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colours per frame.\ngapminer: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n3-2.2.2 Importing the Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;% # mutate_each\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet\nmutate_each_() of dplyr package is used to convert all character data type into factor\nmutate of dplyr package is used to convert data values of Year field into integer\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0.\n\nIn view of this, we will re-write the code by using mutate_at()(link is different from notes) as shown in the code chunk below\nInstead of using mutate_at(), across() can be used to derive the same outputs\n\n\nUsing mutate_at()Using mutate(across())\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;% # mutate_at()\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;% # mutate(across())\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieve the same results!",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2.3 Animated Data Visualisation: gganimate Methods",
    "text": "3-2.3 Animated Data Visualisation: gganimate Methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*(): Defines how the data should be spread out and how it relates to itself across time\nview_*(): Defines how the positional scales should change along the animation\nshadow_*(): Defines how data from other points in time should be presented in the given point in time\nenter_*()/exit_*(): Defines how new data should appear and how old data should disappear during the course of animation\nease_aes(): Defines how different aesthetics should be eased during transitions\n\n\n3-2.3.1 Building a Static Population Bubble Plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n3-2.3.2 Building the Animated Bubble Plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year)\nease_aes() is used to control easing of aesthetics. The default is linear.\n\nOther methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2.4 Animated Data Visualisation: plotly",
    "text": "3-2.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n3-2.4.1 Building an Animated Bubble Plot: ggplotly() Method\nIn this sub-section, an animated bubble plot will be created by using the ggplotly() method.\n\nNew Plot (without legend)CodeOriginal Plot (with legend)\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3-2.4.2 Building an Animated Bubble Plot: plot_ly() Method\nIn this sub-section, an animated bubble plot will be created with the plot_ly() method.\n\nplot_ly() Plotplot_ly() Codeggplotly() Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe plot_ly() method is much simpler and easier to read and code compared to the ggplotly() method due to its simpler syntax and fewer layers of customisation.\n\nThe execution time needed for plot_ly() is also lower.\n\n\n\n\n\n3-2.4.3 Improving Animated Bubble Plot: plot_ly() Method\nChanges implemented: - Bubble size - Added legend\n\nPlotCode3-2.5 Reference\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(10,600),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by an SMU senior\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#reference",
    "title": "Hands-on Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2.5 Reference",
    "text": "3-2.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by an SMU senior\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercise",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, several ggplot2 extensions were used to create a more elegant and effective statistical graphics. By the end of this exercise, the following will be performed:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrtheme packages\nPlot composite figure by combing ggplot2 graphs by using patchwork package",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, several ggplot2 extensions were used to create a more elegant and effective statistical graphics. By the end of this exercise, the following will be performed:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrtheme packages\nPlot composite figure by combing ggplot2 graphs by using patchwork package",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2 Getting started",
    "text": "2.2 Getting started\n\n2.2.1 Install and Load the Required Libraries\nIn this exercise, besides tidyverse (Explored in Hands-on Exercised 1), four R packages will be used. They are: 1. ggrepel: an R package providing geoms for ggplot2 to repel overlapping text labels 2. ggthemes: an R package providing some extra themes, geoms, and scales for ggplot2 3. hrbrthemes: an R package providing typography-centric themes and theme components for ggplot2 4. patchwork: an R package for preparing composite figure created using ggplot2\nCode chunk below will be used to check if these packages have been installed and also load them onto my working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse,stringr)\n\n\n\n2.2.2 Importing Data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyversepackage.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot Annotation: ggrepel",
    "text": "2.3 Beyond ggplot Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n2.3.1 Working with ggrepel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsing the Repel code modifies the Default Plot such that only non-overlapping labels are shown and the Best-fit Curve is visible now as compared to being blocked by all the labels in the Default Plot.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Section 2.5.1\n\n\n\nDefault CodeWith Repel Code\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Default\")\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"With Repel\")",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.4 Beyond ggplot2 Themes",
    "text": "2.4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal() and theme_void()\nIn the example below, a plot of “Distribution of Maths Scores” was done using various themes.\n\nDefault Vs Gray Vs GreyOther Built-in Themes 1Other Built-in Themes 2Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_gray() # Change this to different the themes\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Default, Gray and Grey themes are all the same theme! The default is theme_gray() and theme_grey() is an alias to theme_gray().\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2.4.1 Working with ggtheme Packages\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various themes.\n\nggtheme 1ggtheme 2ggtheme 3Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist() # Change this to different themes\n                    # ggtheme2 top right is theme_solid\n\n\n\n\nIt also provides some extra geoms and scales for ggplot2. Consult this vignette to learn more.\n\n\n2.4.2 Working with hrbrthemes Package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various settings.\n\nDefault theme vs Default theme_ipsum()Default theme_ipsum() vs Modified theme_ipsum()Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") # Default has no theme, and Default theme_ipsum has no extra parameters\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15\ngrid argument is used to remove the x-axis grid lines",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5 Beyond Single Graph",
    "text": "2.5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, composite plots will be created by combining multiple graphs. Three statistical graphics will be created using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versuss Maths score as shown below:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))\n\n\n\n\n\n2.5.1 Creating Composite Graphics: patchwork Methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. The ggplot2 extension extension called patchwork  is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax for creating layouts super easily. The general syntax is:\n\nTwo-Column Layout using the Plus sign “+”\nParenthesis “()” to create a subplot group\nTwo-Row Layout using the Division design “/”\n\n\n\n2.5.2 Combing Two ggplot2 Graphs\nThe figure in the tabset below shows a composite of two histograms created using patchwork. The code and syntax used to create the plot simple!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n2.5.3 Combining Three ggplot2 Graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator to define the sequence of the plotting\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n2.5.4 Creating a Composite Figure with Tagging\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTake note that the tagging goes from top left -&gt; btm left -&gt; top right -&gt; btm right!\n\n\n\n\n2.5.5 Creating Figure with Insertion\nPatchwork allows more than just providing functions to place plots next to each other based on the provided layout. With inset_element(), one or several plots or graphic elements can be placed freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\n2.5.6 Creating a Composite Figure by Using patchwork and ggtheme\nThe figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.6 References",
    "text": "2.6 References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes Link is broken\nggplot tips: Arranging plots Link is broken\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Hands-On Exercise",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website was created as part of the coursework for ISSS608: Visual Analytics and Applications, a module under the Master of IT in Business (MITB) program at Singapore Management University (SMU). It was developed using RStudio with Quarto, version-controlled via GitHub, and published through Netlify.\nThe author, Calvin Tan Song Hao, is an aspiring Data Analyst and a current student in the SMU MITB program. With a background in R&D engineering, I aim to leverage my analytical skills and technical expertise to solve real-world problems and uncover data-driven insights that support impactful decision-making.\n\n\n\n\n\n\nNote\n\n\n\nPlease feel free to click on my LinkedIn and GitHub links for more info!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, the basic principles and essential components of ggplot2 will be explored. At the same time, I will develop hands-on experience using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter, I will apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, the basic principles and essential components of ggplot2 will be explored. At the same time, I will develop hands-on experience using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter, I will apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Getting Started",
    "text": "1.2 Getting Started\n\n1.2.1 Install and Load the Required Libraries\nThe code chunk below uses p_load() of pacman package to check if tidyverse these packages are installed in the computer. If they are, then they will be launched into R.\nBefore starting, it is important to ensure that the required R packages have been installed. If they are installed, the R packages will be loaded. Otherwise, the the R packages will first be installed then loaded into the R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below assumes that pacman package is already installed. If not, install pacman first.\n\n\n\npacman::p_load(tidyverse, patchwork)\n\n\n\n\n\n\n\nNote\n\n\n\nPatchwork is used for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-on Exercise 2: Section 2.5.1\n\n\n\n\n1.2.2 Importing the Data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package since the file is in csv format. The readr part of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe data:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Introducing ggplot",
    "text": "1.3 Introducing ggplot\n is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\n\n\n\n\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\n\n\n\nFor more detail, visit ggplot2.\n\n1.3.1 R Graphics VS ggplot\nComparing how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\n\n\nTip\n\n\n\nggplot2 gives much more functionalities on how to style the graph",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Grammar of Graphics",
    "text": "1.4 Grammar of Graphics\nBefore using ggplot2, it is important to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Essential Grammatical Elements in ggplot2: Data",
    "text": "1.5 Essential Grammatical Elements in ggplot2: Data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears\nggplot() initializes a ggplot object\nThe data argument defines the dataset to be used for plotting\nIf the dataset is not already a data.frame, it will be converted to one by fortify()",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic Mappings",
    "text": "1.6 Essential Grammatical Elements in ggplot2: Aesthetic Mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification).\nThe code chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAll aesthetics of a plot are specified in the aes() function call and the code above adds MATHS to the x-axis\nggplot includes the x-axis and the axis’s label",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1.7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function)\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1.7.1 Geometric Objects: geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if I want to show the code only or the graph only?\n\n\n\n\n\n\n\nUse #| eval: false to show code without plotting graph\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\nUse #| echo: false to plot graph without showing code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\neval and echo is very useful in patchwork and panel-tabset\n\n\n\n\n\n1.7.2 Geometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5) +\n  ggtitle(\"With y-axis\")\n\nd2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL) +\n  ggtitle(\"Without y-axis\")\n\nd1 + d2\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-on Exercise 2: Section 2.5.1\n\n\n\n\n1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNote that the default bin is 30\n\n\n\n\n\n1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below:\n\nBins argument is used to change the number of bins to 20,\nFill argument is used to shade the histogram with light blue color, and\nColor argument is used to change the outline colour of the bars in black\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  +\n  ggtitle(\"Default\")\n\nh2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh1 + h2\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAdjusting bin size fixes the gap and adding colour makes the plot more visually appealing\n\n\n\n\n\n1.7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh4 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")  +\n  ggtitle(\"Adding Subgroup\")\n\nh3 + h4\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nUsing sub-groups allows for bivariate analysis\nThis approach can be used to adjust colour, fill and alpha of the geometric elements\n\n\n\n\n\n1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nLeft Graph: Plots the distribution of Maths scores in a kernel density estimate plot\nRight Graph: Plots two kernel density lines by using colour or fill arguments of aes()\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() +\n  ggtitle(\"Default\")\n\nk2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  ggtitle(\"Gender Sub-group\")\n\nk1 + k2\n\n\n\n\n\n\n1.7.7 Geometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nLeft Graph: Plots boxplots by using geom_boxplot().\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nRight Graph: Plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot() +\n  ggtitle(\"Default\")\n\nb2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n  ggtitle(\"Notched\")\n\nb1 + b2\n\n\n\n\n\n\n1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions since they are placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1.7.9 Geometric Objects: Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.8 Essential Grammatical Elements in ggplot2: Stat",
    "text": "1.8 Essential Grammatical Elements in ggplot2: Stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nFrequency of values of a variable (bar graph)\n\nA mean\nA confidence limit\n\nThere are two ways to use these functions:\n\nAdd a stat_() function and override the default geom, or\nAdd a geom_() function and override the default stat\n\n\n\n1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1.8.2 Working with stat - the stat_summary() method\nThe left graph adds mean values by using stat_summary() function and overriding the default geom.\n\n\n1.8.3 Working with stat - the geom() method\nThe right graph adds mean values by using geom_() function and overriding the default stat.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4) +\n  ggtitle(\"stat_summary() method\")\n\ns2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"geom_() method\")\n\ns1 + s2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieves the same result by adding a red marker to represent the mean.\n\n\n\n\n1.8.4 Adding a Best-Fit Curve on a Scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best-fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nLeft Graph: geom_smooth() is used to plot a best-fit curve on the scatterplot.\nRight Graph: The default smoothing method is overridden to show a linear best fit-line.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\nf2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\nf1 + f2",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1.9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_wrap() and facet_grid().\n\n1.9.1 Working with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid() because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1.9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfacet_grid() is also ideal for displaying sequential variables like the performance of different classes. For the above example, facet_grid() is better than facet_wrap() since it allows easiy comparisons across all classes.",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1.10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): The default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): A cartesian system with the x and y flipped\ncoord_fixed(): A cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): A coordinate system that approximates a good aspect ratio for maps\n\n\n1.10.1 Working with Coordinate\n\nLeft Graph: By the default, the bar chart of ggplot2 is in vertical form\nRight Graph: coord_flip() flips the horizontal bar chart into vertical bar chart\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb3 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  ggtitle(\"Default\")\n\nb4 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  ggtitle(\"coord_flip()\")\n\nb3 + b4\n\n\n\n\n\n\n1.10.1 Changing the y- and x-axis Range\n\nLeft Graph: The default scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\nRight Graph: Fixed both the y-axis and x-axis range from 0-100.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  ggtitle(\"Default\")\n\nr2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Equal y- and x-axis Range\")\n\nr1 + r2",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.11 Essential Grammatical Elements in ggplot2: Themes",
    "text": "1.11 Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. For example:\n\nBackground colour\nSize of fonts\nGridlines\nColour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\n\n\n\n\nNote\n\n\n\nThemes can make the plots more visually appealing. The available built-in themes are: theme_grey(), theme_gray(), theme_bw(), theme_linedraw(), theme_light() theme_dark(), theme_minimal(), theme_classic(), theme_void() and theme_test()\n\n\n\nDefault Vs Gray Vs GreyOther Built-in Themes 1Other Built-in Themes 2Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray() + # Change this to the different themes\n  ggtitle(\"theme\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Default, Gray and Grey themes are all the same theme! The default is theme_gray() and theme_grey() is an alias to theme_gray().",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper - Components\nLearning ggplot2 on Paper - Layer\nLearning ggplot2 on Paper - Scale",
    "crumbs": [
      "Hands-On Exercise",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#learning-outcome",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#getting-started",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.2 Getting Started",
    "text": "3-1.2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph: For making ‘ggplot’ graphics interactive\nplotly: An R library for plotting interactive statistical graphs\nDT: Provides an R interface to the JavaScript library DataTables that create interactive table on html page\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork: For combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly,\n               patchwork, DT, tidyverse)",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#importing-data",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.3 Importing Data",
    "text": "3-1.3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.4 Interactive Data Visualisation - ggiraph Methods",
    "text": "3-1.4 Interactive Data Visualisation - ggiraph Methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: A column of data-sets that contain tooltips to be displayed when the mouse is over elements\nOnclick: A column of data-sets that contain a JavaScript function to be executed when elements are clicked\nData_id: A column of data-sets that contain an id to be associated with elements\n\nIf it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3-1.4.1 Tooltip Effect with Tooltip Aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.5 Interactivity",
    "text": "3-1.5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3-1.5.1 Displaying Multiple Information on Tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity-1",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.6 Interactivity",
    "text": "3-1.6 Interactivity\n\n\n\n\n\n\nNote\n\n\n\nBy hovering the mouse pointer on a data point of interest, the student’s ID and CLASS are displayed.\n\n\n\n\n\n\n\n\n\n3-1.6.1 Customising Tooltip Style\nCode chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css &lt;- \"background-color: white;  #&lt;&lt;\nfront-style:bold; color: #ff0000;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe background colour of the tooltip is white and the font colour is red and bold\nRefer to Customizing girafe objects to learn more about how to customise ggriaph objects\n\n\n\n\n\n3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n3-1.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n3-1.6.4 Styling Hover Effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly\n\n\n\n\n3-1.6.5 Combining Tooltip and Hover Effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n3-1.6.6 Click Effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n3-1.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---plotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---plotly-method",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.7 Interactive Data Visualisation - plotly Method",
    "text": "3-1.7 Interactive Data Visualisation - plotly Method\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3-1.7.1 Creating an Interactive Scatter Plot: plot_ly() Method\nThe tabset below shows an example of a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe code using plot_ly() is simpler than ggplot2\nplot_ly() is interactive by default as compared to ggplot2 Hands-On Exercise 3-1: Section 3-1.5\n\n\n\n\n\n3.7.2 Working with Visual Variable: plot_ly() Method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nClick on the colour symbol at the legend\n\n\n\n\n3-1.7.3 Creating an Interactive Scatter Plot: ggplotly() Method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that the only extra line needed in the code chunk is ggplotly().\nThis is much simpler as compared to the ggplot2 tooltip method in Hands-On Exercise 3-1: Section 3-1.5.1\n\n\n\n\n\n3-1.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\nTwo scatter plots will be created by using ggplot2 functions.\nLastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected. - But clicking on any data point results in a permanent selection, with no way to deselect it.\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight_key() simply creates object of class crosstalk::SharedData\nLearn more about crosswalk\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis code is much simpler than the ggiraph method in Hands-On Exercise 3-1: Section 3-1.6.7,\nAnother difference is that the plotly highlight_key() method shows it’s corresponding point on click but the ggiraph method shows it’s corresponding point on hover\n\n\n\n\n\n3-1.7.5 Improving Coordinated Multiple Views with plotly\nThere are a few issues with the coordinated multiple view plot above.\n\n\n\n\n\n\nHow to fix the annoying permanent selection issue?\n\n\n\nAdding selectize = FALSE allows for the user to do a double-click on any blank space to reset selection and shows all points again\n\n\n\n\n\n\n\n\nCan the selection method be on hover instead of on click?\n\n\n\n\nBy default, highlight_key() works on click, not hover but using plotly_hover allows it to mirror the ggiraph method in Hands-On Exercise 3-1: Section 3-1.6.7\n\n\n\n\n\n\n\n\n\nLastly, where are the axis labels?\n\n\n\n\nUse labs(), titleX and titleY to add axis labels\nUse margin so that the labels will not overlap the graph\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"ENGLISH\")\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"SCIENCE\")\n\nsubplot(\n  ggplotly(p1),\n  ggplotly(p2),\n  titleX = TRUE,\n  titleY = TRUE,\n  margin = 0.05) %&gt;%\n  highlight(on = \"plotly_hover\", selectize = FALSE)",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---crosstalk-method",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.8 Interactive Data Visualisation - crosstalk Method",
    "text": "3-1.8 Interactive Data Visualisation - crosstalk Method\ncrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3-1.8.1 Interactive Data Table: DT Package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nTableCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n3-1.8.2 Linked Brushing: crosstalk Method\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)       \n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-datatable",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-datatable",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.8.3 Improving DataTable",
    "text": "3-1.8.3 Improving DataTable\nThe DataTables above have 2 extra columns (tooltip and onclick). This is because they were added in Hands-On Exercise 3-1: Section 3-1.5.1 for tooltip and in Hands-On Exercise 3-1: Section 3-1.6.6 for onclick.\nA new dataset will be read to view how the DataTable should look like without the additional columns.\n\nexam_data_2 &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\nNote\n\n\n\npageLength is used to set the default number of entries to 5 for a more compact table\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(exam_data_2, \n              class = \"compact\",\n              options = list(\n                pageLength = 5)\n)",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-crosstalk-table",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-crosstalk-table",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.8.4 Improving crosstalk Table",
    "text": "3-1.8.4 Improving crosstalk Table\nThe crosstalk table in Hands-On Exercise 3-1: Section 3-1.8.2 has a very long DataTable on the right. This requires horizontal scrolling of the DataTable which is not an ideal user interface design. Therefore, the crosstalk layout has been changed from side-by-side to top-and-bottom by setting width to 12.\n\n\n\n\n\n\nNote\n\n\n\n\nAlso applied compact class and set the default entity size to 5\nUsed layout() control the size of the plot to be a square shape since the axis are equal\nUsed div() to control the height allocated to the plot\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis crosstalk table is more compact and user friendly by showing all the necessary information without unnecessary scrolling!\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# library(htmltools)\n\nd &lt;- highlight_key(exam_data_2)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(\n  ggplotly(p) %&gt;% layout(height = 300, width = 300),\n  \"plotly_selected\"\n)\n\ncrosstalk::bscols(\n  widths = 12,\n  div(style = \"height: 300px;\", gg),\n  DT::datatable(d, \n                class = \"compact\",\n                options = list(pageLength = 5))\n)",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#reference",
    "title": "Hands-on Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.9 Reference",
    "text": "3-1.9 Reference\n\n3-1.9.1 ggiraph\nThis link provides an online version of the reference guide and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3-1.9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this link\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nThis link provides a very interesting implementation of gganimate by an SMU senior.\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercise",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Reference: Picture Link\nThis webpage serves as a portfolio showcasing my coursework for ISSS608: Visual Analytics and Applications at Singapore Management University (SMU).\nThroughout the course, I gained hands-on experience in using RStudio for implementing various data visualization techniques, as well as Tableau for creating interactive dashboards. I also developed an understanding of version control using GitHub and learned how to publish analytical reports and dashboards using Quarto and deploy them as a website via Netlify. This portfolio reflects the practical skills and concepts I acquired in the course.\n\n\n\n\n\n\nNote\n\n\n\nPlease use the toggle at the top right to switch between light and dark mode based on your preference!"
  }
]