[
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "test",
    "section": "",
    "text": "pacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"C:/calvintansh/ISSS608-VAA/Hands-on_Ex/Hands-on_Ex03-2/data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;% # mutate(across())\n  mutate(Year = as.integer(Year))\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(10,600),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers',\n          colorscale = \"Turbo\"\n          )\nbp"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "This exercise will be composed of two phases:\n\nPhase 1: Designing my own data visualisation (The focus of this page)\nPhase 2: selecting one submission provided by my classmate, critiquing three good design principles and identifying three areas for further improvement. Based on these feedbacks, I will prepare the makeover version of their data visualisation.\n\n\n\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nAssuming the role of the graphical editor of the media company, I am tasked to prepare at most three data visualisation for this article.\n\n\n\n\n\n\nTip\n\n\n\nCreating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It is about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately.\n\n\nThe data should also be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions. In addition, no interactive data visualisation are required.\n\n\n\nThe data for this exercise is the Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset, retrieved by Department of Statistics, Singapore (DOS).\n\n\n\nThese, five R packages will be used for the preparation of this exercise:\n\ntidyverse: A collection of R packages designed for data science. It includes packages like dplyr, ggplot2, tidyr, and readr that simplify data wrangling and visualization.\npatchwork: An R package that allows users to easily combine multiple ggplot2 plots into a single composite layout, useful for comparative visual analysis.\nggthemes: This package adds extra themes, scales, and geoms to ggplot2, making it easier to apply distinct themes to plots.\nknitr: A reporting package that integrates R code with markdown, enabling dynamic report generation in formats such as HTML, PDF, and Word, often used with R Markdown and Quarto.\ncowplot: An extension of ggplot2 that simplifies plot arrangement and annotation. It provides functions like ggdraw() and draw_plot() for overlaying and aligning plots, often used for fine-tuned visual layouts.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\npacman::p_load(tidyverse, patchwork, ggthemes, knitr, cowplot)\n\n\n\n\n\n\n\nFor the purpose of this exercise, a data file called respopagesex2024 will be used. It consists of data about Singapore Residents by Planning Area / Subzone, categorised by a Single Year of Age and Sex,for June 2024. It is in a csv file format.\nThe code chunk below imports respopagesex2024.csv into R environment by using read_csv() function of readr package (under tidyverse).\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nsg_data &lt;- read_csv(\"data/respopagesex2024.csv\")",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#background",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#background",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024.\nAssuming the role of the graphical editor of the media company, I am tasked to prepare at most three data visualisation for this article.\n\n\n\n\n\n\nTip\n\n\n\nCreating enlightening and truthful data visualizations involves focusing on accuracy, transparency, and the ability to effectively communicate insights. It is about presenting data in a way that is both informative and aesthetically pleasing, ensuring the audience can grasp the information quickly and accurately.\n\n\nThe data should also be processed by using appropriate tidyverse family of packages and the data visualisation must be prepared using ggplot2 and its extensions. In addition, no interactive data visualisation are required.",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#data-source",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#data-source",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "The data for this exercise is the Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 dataset, retrieved by Department of Statistics, Singapore (DOS).",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#install-and-load-the-required-libraries",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#install-and-load-the-required-libraries",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "These, five R packages will be used for the preparation of this exercise:\n\ntidyverse: A collection of R packages designed for data science. It includes packages like dplyr, ggplot2, tidyr, and readr that simplify data wrangling and visualization.\npatchwork: An R package that allows users to easily combine multiple ggplot2 plots into a single composite layout, useful for comparative visual analysis.\nggthemes: This package adds extra themes, scales, and geoms to ggplot2, making it easier to apply distinct themes to plots.\nknitr: A reporting package that integrates R code with markdown, enabling dynamic report generation in formats such as HTML, PDF, and Word, often used with R Markdown and Quarto.\ncowplot: An extension of ggplot2 that simplifies plot arrangement and annotation. It provides functions like ggdraw() and draw_plot() for overlaying and aligning plots, often used for fine-tuned visual layouts.\n\nCode chunk below will be used to check if these packages have been installed and also load them onto the working R environment.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\npacman::p_load(tidyverse, patchwork, ggthemes, knitr, cowplot)",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#importing-data",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#importing-data",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "For the purpose of this exercise, a data file called respopagesex2024 will be used. It consists of data about Singapore Residents by Planning Area / Subzone, categorised by a Single Year of Age and Sex,for June 2024. It is in a csv file format.\nThe code chunk below imports respopagesex2024.csv into R environment by using read_csv() function of readr package (under tidyverse).\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nsg_data &lt;- read_csv(\"data/respopagesex2024.csv\")",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#checking-for-duplicates",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#checking-for-duplicates",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 2.1 Checking for duplicates",
    "text": "1-1: 2.1 Checking for duplicates\nBefore proceeding further with the EDA, a check for duplicated records was done using group_by_all() and filtering rows with more than 1 count. The results of the code below confirms that there were no duplicated records.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nduplicate &lt;- sg_data %&gt;% \n  group_by_all() %&gt;% \n  filter(n()&gt;1)\n  \nduplicate\n\n# A tibble: 0 × 6\n# Groups:   PA, SZ, Age, Sex, Pop, Time [0]\n# ℹ 6 variables: PA &lt;chr&gt;, SZ &lt;chr&gt;, Age &lt;chr&gt;, Sex &lt;chr&gt;, Pop &lt;dbl&gt;,\n#   Time &lt;dbl&gt;",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#fixing-age-column-inconsistency",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#fixing-age-column-inconsistency",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 2.2 Fixing Age Column Inconsistency",
    "text": "1-1: 2.2 Fixing Age Column Inconsistency\nAlthough there were no duplicated records, the earlier EDA of variable types and the data table revealed that the Age column, which appears to be a continuous variable, was incorrectly recognised as a categorical variable.\nUpon further analysis of the Age column using the code below, it was found to contain 91 unique values. These values range from 0 to 89 and are numeric in nature, but the last value is a string, “90_and_Over”. This string caused the Age column to be recognised as a categorical variable instead of a continuous one.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nunique(sg_data$Age)\n\n [1] \"0\"           \"1\"           \"2\"           \"3\"           \"4\"          \n [6] \"5\"           \"6\"           \"7\"           \"8\"           \"9\"          \n[11] \"10\"          \"11\"          \"12\"          \"13\"          \"14\"         \n[16] \"15\"          \"16\"          \"17\"          \"18\"          \"19\"         \n[21] \"20\"          \"21\"          \"22\"          \"23\"          \"24\"         \n[26] \"25\"          \"26\"          \"27\"          \"28\"          \"29\"         \n[31] \"30\"          \"31\"          \"32\"          \"33\"          \"34\"         \n[36] \"35\"          \"36\"          \"37\"          \"38\"          \"39\"         \n[41] \"40\"          \"41\"          \"42\"          \"43\"          \"44\"         \n[46] \"45\"          \"46\"          \"47\"          \"48\"          \"49\"         \n[51] \"50\"          \"51\"          \"52\"          \"53\"          \"54\"         \n[56] \"55\"          \"56\"          \"57\"          \"58\"          \"59\"         \n[61] \"60\"          \"61\"          \"62\"          \"63\"          \"64\"         \n[66] \"65\"          \"66\"          \"67\"          \"68\"          \"69\"         \n[71] \"70\"          \"71\"          \"72\"          \"73\"          \"74\"         \n[76] \"75\"          \"76\"          \"77\"          \"78\"          \"79\"         \n[81] \"80\"          \"81\"          \"82\"          \"83\"          \"84\"         \n[86] \"85\"          \"86\"          \"87\"          \"88\"          \"89\"         \n[91] \"90_and_Over\"\n\n\n\n\n\nTo address this issue, the code below converts the string “90_and_Over” into the numerical value 90, and subsequently ensures that the Age column is treated as a numeric variable.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nsg_data$Age &lt;- as.character(sg_data$Age)\n\nsg_data$Age[sg_data$Age == \"90_and_Over\"] &lt;- \"90\"\n\nsg_data$Age &lt;- as.numeric(sg_data$Age)",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#binning-age-column",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#binning-age-column",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 2.3 Binning Age Column",
    "text": "1-1: 2.3 Binning Age Column\nEven after fixing the inconsistent data type in the Age column, there were still 91 unique values, which will be too many for meaningful analysis. Therefore, the Age column will be binned into the following categorise using the code below:\n\nYoung: Singapore residents aged 0 to 24\nEconomically_Active: Singapore residents aged 25 to 64\nAged: Singapore residents aged 65 and above\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nsg_data$Age_Group &lt;- cut(\n  sg_data$Age,\n  breaks = c(-1, 24, 64, Inf),\n  labels = c(\"Young\", \"Economically_Active\", \"Aged\"),\n  right = TRUE\n)\n\nunique(sg_data$Age_Group) # shows that the binning works\n\n[1] Young               Economically_Active Aged               \nLevels: Young Economically_Active Aged\n\n\n\n\n\nAfter completing the data manipulation steps described in earlier, the resulting data is shown in the table below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\nAge_Group\n\n\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nMales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n0\nFemales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nMales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n1\nFemales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nMales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n2\nFemales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n3\nMales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n3\nFemales\n10\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n4\nMales\n30\n2024\nYoung\n\n\nAng Mo Kio\nAng Mo Kio Town Centre\n4\nFemales\n10\n2024\nYoung\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nkable(head(sg_data, 10))",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#population-across-planning-areas-by-sex",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#population-across-planning-areas-by-sex",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 3.1 Population Across Planning Areas by Sex",
    "text": "1-1: 3.1 Population Across Planning Areas by Sex\nThis section examines the distribution of Singapore’s Population across Planning Areas, categorised by Sex, to better understand the demographic patterns of different regions.\n\n1-1: 3.1.1 Feature Engineering\nIn this step, the following features were added to support in the visual analysis later:\n\nThe dataset sg_data was grouped by PA and Sex to calculate the Pop for each subgroup using summarise(Pop = sum(Pop)).\nA second group by PA was performed to calculate the Total population per PA, stored in a new column Total.\nRows with a Total population of 0 were removed using filter(Total &gt; 0) to eliminate empty PAs from the analysis.\nThe resulting data structure, demography_sex, now contains the Total population broken down by Sex and PA, along with overall population Total per PA.\n\nThe code below performs the transformation necessary in preparation for visual analysis, enabling the comparison of population distribution between Males and Females across different PAs.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ndemography_sex &lt;- sg_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Total = sum(Pop))\n\ndemography_sex &lt;- demography_sex %&gt;%\n  filter(Total &gt; 0)\n\nkable(head(demography_sex, 10))\n\n\n\n\nPA\nSex\nPop\nTotal\n\n\n\n\nAng Mo Kio\nFemales\n84210\n160450\n\n\nAng Mo Kio\nMales\n76240\n160450\n\n\nBedok\nFemales\n143770\n277660\n\n\nBedok\nMales\n133890\n277660\n\n\nBishan\nFemales\n45640\n88210\n\n\nBishan\nMales\n42570\n88210\n\n\nBukit Batok\nFemales\n86070\n168390\n\n\nBukit Batok\nMales\n82320\n168390\n\n\nBukit Merah\nFemales\n78160\n149390\n\n\nBukit Merah\nMales\n71230\n149390\n\n\n\n\n\n\n\n\n\n\n1-1: 3.1.2 Methods and Explanation\nThe aim is to create a detailed view of Population distribution by Sex across Singapore’s Planning Areas. These were the steps taken to create a stacked horizontal bar chart for visualisation:\nHorizontal Bar Chart s1:\n\nTo create a horizontal bar chart with population Total in descending order, the PA was initially ordered by ascending Total using the pa_order() vector. Although the factor levels were arranged in ascending order, the use of coord_flip() in the plot reverses the axis orientation, resulting in Total being displayed in descending order as intended.\nggplot() was used with geom_bar() (with stat = “identity” and position = “stack”) to create a stacked horizontal bar chart (s1), displaying the Pop by Sex across PA.\ntheme_minimal() was applied for a clean visual style, and labs() with ggtitle() were used to customise the axis labels and plot title.\nscale_fill_manual() was used to assign distinct colours to Males and Females and to control the legend order, explicitly setting it as: Males → Females instead of the reversed order if left as default.\nscale_y_continuous(labels = scales::comma) was used to show numerical numbers rather than the scientific notation.\ntheme(legend.position = “bottom”) was used to move the legend position from the right to the bottom to allow the plot to be wider.\n\nZoomed-in Plot s2:\n\nA zoomed-in plot (s2) shows the bottom 10 PA and will be embedded into the main plot later. This method makes it easier to examine less populous PAs in the same figure.\nSince the zoomed-in plot (s2) will be overlaid on top of the main chart (s1), theme_test() was used to provide a contrast with the main s1 plot in the background.\nThe legend and background was removed using theme() and the axis titles were removed using labs() for a cleaner plot.\n\nZoom Rectangle:\n\nThis was created using cowplot() to be a transparent dotted line rectangle to allow highlighting of the zoomed-in location.\n\nOverlaid Plots:\n\nggdraw() was used to create an empty canvas, and draw_plot() was used to overlay s1, s2, and the zoom rectangles. All these functions are a part of the cowplot package.\n\n\n\n1-1: 3.1.3 Plots and Analysis\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npa_order &lt;- demography_sex %&gt;%\n  distinct(PA, Total) %&gt;%\n  arrange(Total) %&gt;%\n  pull(PA)\n\ndemography_sex &lt;- demography_sex %&gt;%\n  mutate(\n    PA = factor(PA, levels = pa_order)\n  )\n\ns1 &lt;- ggplot(data = demography_sex, \n       aes(x = PA, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(\n    x = \"Planing Area\",\n    y = \"Population\",\n    fill = \"Sex\"\n  ) +\n  ggtitle(\"Population Across Planning Areas by Sex\") +\n  scale_fill_manual(\n    values = c(\n      \"Males\" = \"#88CCEE\",\n      \"Females\" = \"#CC6677\"\n    ),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  scale_y_continuous(labels = scales::comma) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\ndemography_sex_bottom10 &lt;- demography_sex %&gt;%\n  filter(PA %in% head(pa_order, 10))\n\ns2 &lt;- ggplot(data = demography_sex_bottom10, \n       aes(x = PA, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +\n  theme_test() +\n  labs(\n    x = NULL,\n    y = NULL\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Males\" = \"#88CCEE\",\n      \"Females\" = \"#CC6677\"\n    ),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"transparent\", colour = NA)\n  )\n\nzoom_rect &lt;- ggplot() +\n  geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1),\n            fill = NA, color = \"black\", linetype = \"dashed\") +\n  theme_void()\n\nggdraw() +\n  draw_plot(s1, 0, 0, 1, 1) +\n  draw_plot(s2, 0.4, 0.185, 0.56, 0.25) +\n  draw_plot(zoom_rect, 0.005, 0.155, 0.3, 0.206) +\n  draw_plot(zoom_rect, 0.37, 0.18, 0.62, 0.27) # (left , btm, right, top)\n\n\n\n\n\n\n\nMost Populated\n\nTampines\nBedok\nSengkang\nJurong West\nWoodlands\n\n\n\n\nLeast Populated\n\nSeletar\nMuseum\nWestern Water Catchment\nSungei Kadut\nOrchard\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nGender Ratio\n\nThe Sex distribution is generally balanced across all PAs.\n\n\n\nResidential Areas\n\nThe most populated PAs consists of a mix of mature estates (e.g., Tampines, Bedok) and newer estates (e.g, Sengkang, Jurong West, Woodlands) (Refer to Section 5 Appendix: Singapore’s Estate Classification\nThis reflects the government of Singapore’s success in transforming newer towns or underutilised land into well-developed residential hubs that are comparable to existing mature estates.\n\n\n\nCommercial / Industrial /Military Areas\n\nThe least populated PAs are primarily non-residential zones such as:\n\nCommercial: Museum, Orchard\nIndustrial: Sungei Kadut\nMilitary/Nature: Seletar (air base), Western Water Catchment\n\n\n\n\n\n\n\n1-1: 3.2.4 Reflections\n\n\n\n\n\n\nReflections\n\n\n\nThe ggforce package includes the facet_zoom() function that allows for zooming in on a part of a plot and automatically draws a box to indicate the zoomed region.\nHowever, facet_zoom() does not support zooming in on discrete scales like the bottom 10 PAs in Pop. Therefore, I had manually created a separate zoomed-in plot (s2) and the zoom rectangles to highlight the region that will be zoomed-in.",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#percentage-of-age-groups-across-planning-areas",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#percentage-of-age-groups-across-planning-areas",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 3.2 Percentage of Age Groups Across Planning Areas",
    "text": "1-1: 3.2 Percentage of Age Groups Across Planning Areas\nThis visualisation aims to show the percentage distribution of Age Groups (Young, Economically_Active and Aged) across Planning Areas. This will provide insights into how Singapore residents, in different stages of life, were distributed across Singapore.\n\n1-1: 3.2.1 Feature Engineering\nThe following steps were done in preparation for visual analysis:\n\nThe dataset sg_data was grouped by PA and Age_Group to calculate the Pop for each subgroup using summarise(Pop = sum(Pop)).\nA second group by PA was performed to compute the Total population per PA, stored in a new column Total using mutate(Total = sum(Pop)).\nRows with a Total population of 0 were removed using filter(Total &gt; 0) to eliminate empty PAs from the analysis.\nThe data was then transformed to compute percentage composition of each Age Group within each PA using mutate(Pct_Age_Group = (Pop / Total) * 100).\nPercentages of Age Group were rounded to 1 decimal place using mutate(across(Pct_Age_Group, ~ round(.x, 1))).\n\nThe code below transforms the data and results in the final output pct_demography_age. It contains the percentage of Age Group (Young, Economically Active) for each PA.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ndemography_age &lt;- sg_data %&gt;%\n  group_by(PA, Age_Group) %&gt;%\n  summarise(Pop = sum(Pop)) %&gt;%\n  group_by(PA) %&gt;%\n  mutate(Total = sum(Pop))\n\ndemography_age &lt;- demography_age %&gt;%\n  filter(Total &gt; 0)\n\npct_demography_age &lt;- demography_age %&gt;%\n  mutate(Pct_Age_Group = (Pop / Total) * 100) %&gt;%\n  select(PA, Age_Group, Pct_Age_Group)\n\npct_demography_age &lt;- pct_demography_age %&gt;%\n  mutate(across(Pct_Age_Group, ~ round(.x, 1)))\n\nkable(head(pct_demography_age, 10))\n\n\n\n\nPA\nAge_Group\nPct_Age_Group\n\n\n\n\nAng Mo Kio\nYoung\n20.1\n\n\nAng Mo Kio\nEconomically_Active\n54.6\n\n\nAng Mo Kio\nAged\n25.3\n\n\nBedok\nYoung\n21.8\n\n\nBedok\nEconomically_Active\n55.5\n\n\nBedok\nAged\n22.7\n\n\nBishan\nYoung\n22.6\n\n\nBishan\nEconomically_Active\n55.4\n\n\nBishan\nAged\n21.9\n\n\nBukit Batok\nYoung\n24.8\n\n\n\n\n\n\n\n\n\n\n1-1: 3.2.2 Methods and Explanation\nTo visualize the percentage distribution of Age Groups across Planning Areas, the following plotting steps were performed:\n\nThe PA order in this plot was assigned to match the order used in Section 3.1.3: Population Across Planning Areas by Sex, allowing for easy comparisons between them.\nThe Age Group variable was explicitly ordered as Aged → Economically Active → Young so that the stacked bars chart will be in the reversed order after coord_flip().\nThe legend position was set to be at the bottom using theme(legend.position = “bottom”).\nThe remaining functions have been explained in the plot above in Section 3.1.2: Population Across Planning Areas by Sex.\n\n\n\n1-1: 3.2.3 Plots and Analysis\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npct_demography_age &lt;- pct_demography_age %&gt;%\n  mutate(PA = factor(PA, levels = pa_order),\n         Age_Group = factor(Age_Group, levels = c(\"Aged\", \"Economically_Active\", \"Young\")))\n\nggplot(data = pct_demography_age, \n       aes(x = PA, y = Pct_Age_Group, fill = Age_Group)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(\n    x = \"Planing Area\",\n    y = \"Percentage\",\n    fill = \"Age Group\"\n  ) +\n  ggtitle(\"Percentage of Age Groups across Planning Area\") +\n  scale_fill_manual(\n    values = c(\n      \"Young\" = \"#DDCC77\",\n      \"Economically_Active\" = \"#44AA99\",\n      \"Aged\" = \"#AA4499\"\n    ),\n    breaks = c(\"Young\", \"Economically_Active\", \"Aged\")\n  ) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\nHighest concentrations of Young residents (0 to 24)\n\nPunggol\nSembawang\nSengkang\n\nHigher concentrations of Economically Active and lower proportions of Aged\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nyoung_data &lt;- pct_demography_age %&gt;%\n  filter(Age_Group == \"Young\") %&gt;%\n  arrange(desc(Pct_Age_Group))\n\nmean(young_data$Pct_Age_Group)\n\n[1] 23.15714\n\nkable(head(young_data, 10))\n\n\n\n\nPA\nAge_Group\nPct_Age_Group\n\n\n\n\nWestern Water Catchment\nYoung\n40.7\n\n\nChangi\nYoung\n31.7\n\n\nPunggol\nYoung\n31.4\n\n\nSouthern Islands\nYoung\n29.5\n\n\nSembawang\nYoung\n29.0\n\n\nSingapore River\nYoung\n28.6\n\n\nBukit Timah\nYoung\n28.5\n\n\nSengkang\nYoung\n28.5\n\n\nTanglin\nYoung\n27.2\n\n\nNewton\nYoung\n26.8\n\n\n\n\n\nThese consists of newer non-mature estates (Refer to Section 5 Appendix: Singapore’s Estate Classification such as Punggol, Sengkang, and Sembawang, which are actively being developed by the Singapore government. These are particularly appealing to newly married couples, since many of the new Build-To-Order (BTO) projects in these areas are designed for budget-conscious young families. These households will tend to include more Economically Active individuals as well.\n\n\n\n\n\nExtremely high proportions of Economically Active residents (25 to 64)\n\nMuseum\nDowntown Core\nOrchard\n\nLow proportions of Young and Aged population\nMuseum and Seletar have no recorded Aged population\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\neconomically_active_data &lt;- pct_demography_age %&gt;%\n  filter(Age_Group == \"Economically_Active\") %&gt;%\n  arrange(desc(Pct_Age_Group))\n\nmean(economically_active_data$Pct_Age_Group)\n\n[1] 60.57619\n\nkable(head(economically_active_data, 10))\n\n\n\n\nPA\nAge_Group\nPct_Age_Group\n\n\n\n\nMuseum\nEconomically_Active\n96.2\n\n\nSeletar\nEconomically_Active\n85.7\n\n\nDowntown Core\nEconomically_Active\n80.3\n\n\nOrchard\nEconomically_Active\n73.6\n\n\nTengah\nEconomically_Active\n68.5\n\n\nSingapore River\nEconomically_Active\n63.3\n\n\nSungei Kadut\nEconomically_Active\n63.3\n\n\nSouthern Islands\nEconomically_Active\n62.0\n\n\nRiver Valley\nEconomically_Active\n60.7\n\n\nChoa Chu Kang\nEconomically_Active\n60.2\n\n\n\n\n\nThese patterns suggests that such areas are primarily dominated by working adults and may serve commercial or business purposes (Museum, Downtown Core, and Orchard), or military functions (Seletar and Tengah air bases).\n\n\n\n\n\nHighest concentration of Aged residents (65 and above)\n\nAng Mo Kio\nBukit Merah\nKallang\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\naged_data &lt;- pct_demography_age %&gt;%\n  filter(Age_Group == \"Aged\") %&gt;%\n  arrange(desc(Pct_Age_Group))\n\nmean(aged_data$Pct_Age_Group)\n\n[1] 16.27619\n\nkable(head(aged_data, 10))\n\n\n\n\nPA\nAge_Group\nPct_Age_Group\n\n\n\n\nOutram\nAged\n28.8\n\n\nAng Mo Kio\nAged\n25.3\n\n\nBukit Merah\nAged\n24.5\n\n\nRochor\nAged\n24.5\n\n\nJurong East\nAged\n23.8\n\n\nKallang\nAged\n23.5\n\n\nSerangoon\nAged\n22.9\n\n\nBedok\nAged\n22.7\n\n\nQueenstown\nAged\n22.2\n\n\nToa Payoh\nAged\n22.1\n\n\n\n\n\nThese are mainly mature estates with a higher proportion of elderly residents, many of whom have lived there since their younger years.\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nCentral Districts (e.g., Museum, Downtown Core, Orchard):\n\nHave a high proportion of Economically Active residents, with relatively low concentration of Youth and Aged.\nThese are business or commercial hubs.\n\n\n\nMature Estates (e.g., Ang Mo Kio, Bukit Merah, Kallang):\n\nShow a more balanced demographic distribution, though with a noticeably Ageing population.\n\n\n\nNew Estates (e.g., Punggol, Sembawang, Sengkang):\n\nSkew heavily toward the Young and Economically Active, with fewer Aged residents.\nThis reflects their appeal to new families, likely due to the availability and price of new housing developments.\n\n\n\n\n\n\n\n1-1: 3.2.4 Reflections and Initial Workings\n\n\n\n\n\n\nReflections\n\n\n\nI initially considered using tabs to compare the graphs separately, but later realised that by restructuring the data, all three graphs could be combined into a single stacked bar chart. This thought led to creating the final plot presented above.\n\n\n\nFeature Engineering\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ndemography &lt;- sg_data %&gt;%\n  group_by(PA, Age_Group) %&gt;%\n  summarise(Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  pivot_wider(\n    names_from = Age_Group,\n    values_from = Pop,\n    values_fill = 0\n  ) %&gt;%\n  mutate(Total = Young + Economically_Active + Aged)\n\ndemography &lt;- demography %&gt;%\n  filter(Total &gt; 0)\n\npct_demography &lt;- demography %&gt;%\n  mutate(\n    Pct_Young = (Young / Total) * 100,\n    Pct_Economically_Active = (Economically_Active / Total) * 100,\n    Pct_Aged = (Aged / Total) * 100\n  ) %&gt;%\n  select(PA, Pct_Young, Pct_Economically_Active, Pct_Aged)\n\npct_demography &lt;- pct_demography %&gt;%\n  mutate(across(starts_with(\"pct\"), ~ round(.x, 1)))\n\n\n\n\n\n\nPlots and Reflections\n\nYoungEconomically ActiveAgedCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npct_demography$PA &lt;- factor(pct_demography$PA, levels = rev(sort(unique(pct_demography$PA))))\n\nggplot(data = pct_demography, \n       aes(x = PA, y = Pct_Young)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(\n    x = \"Planing Area\",  # Set a custom x-axis title\n    y = \"Percentage\"   # Set a custom y-axis title\n  ) +\n  ggtitle(\"Percentage of Young across Planning Area\") +\n  scale_y_continuous(limits = c(0, 100))",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#age-distribution-by-sex",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#age-distribution-by-sex",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 3.3 Age Distribution by Sex",
    "text": "1-1: 3.3 Age Distribution by Sex\nSingapore, like many developed countries, is facing the issue of declining birth rates and an increasingly Aging Population. This visualization aims to provide insight into Singapore’s Population pyramid and Gender distribution.\n\n1-1: 3.3.1 Feature Engineering\nThe first part of the code aggregates the Population by Sex, and calculates the percentage of Males and Females by dividing it by the Total.\n\nThe next section prepares for adding labels to the pie chart. The label position (ypos) was calculated using cumulative percentages cumsum(Pct_Sex) - Pct_Sex / 2 since coord_polar(“y”) will be used to create the pie chart.\n\nThe next part of the code is for calculating the gender ratio. Violin plots are normalised to 1 by default so this ratio is needed to adjust the Male plot to be slightly smaller than the Female plot.\nIn the third part, the dataset was prepared to visualise Age distributions by Sex:\n\nThe dataset sg_data was grouped by Age and Sex, then summarised using sum(Pop) to get the population count for each Age-Sex group.\nThe resulting grouped data demography_sex_age was expanded into individual-level observations using uncount(weights = Pop).\n\nThis transformation duplicates each row according to the Pop count, effectively simulating individual records. This is a requirement for plotting accurate violin plots of distributions.\n\n\nThe code below performs the steps above and finally splits the demography_sex_age data into two subsets (Males and Females) to allow overlaying their respective violin plots for easier visual comparison.\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n# First Part\ntotal_by_sex &lt;- aggregate(Pop ~ Sex, data = sg_data, sum) %&gt;%\n    mutate(Total = sum(Pop))\n\npct_total_by_sex &lt;- total_by_sex %&gt;%\n  mutate(Pct_Sex = (Pop / Total) * 100) %&gt;%\n  select(Sex, Pct_Sex)\n\npct_total_by_sex &lt;- pct_total_by_sex %&gt;%\n  mutate(Sex = factor(Sex, levels = c(\"Males\", \"Females\"))) %&gt;%\n  arrange(desc(Sex)) %&gt;%\n  mutate(\n    ypos = cumsum(Pct_Sex) - Pct_Sex / 2,\n    label = paste0(round(Pct_Sex, 1), \"%\")\n  )\n\nkable(pct_total_by_sex)\n\n\n\n\nSex\nPct_Sex\nypos\nlabel\n\n\n\n\nFemales\n51.31834\n25.65917\n51.3%\n\n\nMales\n48.68166\n75.65917\n48.7%\n\n\n\n\n# Second Part\nmales_pct &lt;- pct_total_by_sex$Pct_Sex[pct_total_by_sex$Sex == \"Males\"]\nfemales_pct &lt;- pct_total_by_sex$Pct_Sex[pct_total_by_sex$Sex == \"Females\"]\n\nmale_female_ratio &lt;- males_pct / females_pct\n\nmale_female_ratio\n\n[1] 0.9486211\n\n# Third Part\ndemography_sex_age &lt;- sg_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop))\n\nkable(head(demography_sex_age, 10))\n\n\n\n\nAge\nSex\nPop\n\n\n\n\n0\nFemales\n14370\n\n\n0\nMales\n15090\n\n\n1\nFemales\n15580\n\n\n1\nMales\n16700\n\n\n2\nFemales\n17190\n\n\n2\nMales\n17980\n\n\n3\nFemales\n17340\n\n\n3\nMales\n18200\n\n\n4\nFemales\n19070\n\n\n4\nMales\n19880\n\n\n\n\ndemography_sex_age &lt;- demography_sex_age %&gt;% uncount(weights = Pop)\n\ndemography_males &lt;- demography_sex_age %&gt;%\n  filter(Sex == \"Males\")\n\ndemography_females &lt;- demography_sex_age %&gt;%\n  filter(Sex == \"Females\")\n\n\n\n\n\n\n1-1: 3.3.2 Methods and Explanation\nTo create an overlaid violin plot (p1) comparing Age distributions between Males and Females:\n\nA ggplot() object was initialised to serve as the base plot that the violin plots will be overlaid on.\ngeom_violin() was used twice, once for each Sex, with shared x-axis “All” to overlay both distributions.\nalpha = 0.5 was set to add transparency, allowing both violins to be visible when they overlap.\nscale = “area” ensures the violins are scaled proportionally to the size of their age groups and width = is used to scale the plots according to their population ratios.\nA custom fill colour was set for each sex using scale_fill_manual(), and breaks = c(“Males”, “Females”) ensures the legend appears with Males being first.\ntheme(axis.text.x = element_blank()) hides the x-axis label since both violins are plotted at a shared position “All”.\nlabs() was used to remove the x-axis text and label the y-axis.\nThe legend position was adjusted to the top to provide more space for pie chart (p2) to be inserted.\n\nThe pie chart (p2) is created similarly to the bar charts in the previous sections but with the following modifications:\n\nUsing coord_polar(“y”) to convert it into a pie chart by transforming the y-axis into a circular layout.\nData labels were added using geom_text().\nAxis titles, legend, tick marks, grid lines and plot background were removed using labs() and theme().\n\nLastly, the pie chart (p2) is overlaid over the violin plot (p2) using inset_element() to provide an easy overview of both plots.\n\n\n1-1: 3.3.3 Plots and Analysis\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot() +\n  geom_violin(data = demography_females, \n              aes(x = \"All\", y = Age, fill = \"Females\"), \n              scale = \"area\", alpha = 0.5, width = 1) +\n  geom_violin(data = demography_males, \n              aes(x = \"All\", y = Age, fill = \"Males\"), \n              scale = \"area\", alpha = 0.5, width = male_female_ratio) +\n  theme_minimal() +\n  labs(\n    x = NULL,\n    y = \"Age\",\n    title = \"Age Distribution by Sex\"\n  ) +\n  scale_fill_manual(\n    name = \"Sex\",\n    values = c(\n      \"Males\" = \"#88CCEE\",\n      \"Females\" = \"#CC6677\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme(\n    axis.text.x = element_blank(),\n    legend.position = \"top\"\n  ) +\n  scale_y_continuous(breaks = seq(0, 90, by = 10))\n\np2 &lt;- ggplot(pct_total_by_sex, aes(x = \"\", y = Pct_Sex, fill = Sex)) +\n  geom_bar(stat = \"identity\", color = \"black\", alpha = 0.5) +\n  coord_polar(\"y\") +\n  theme_test() +\n  labs(title = \"Population by Sex\") +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#88CCEE\",\n               \"Females\" = \"#CC6677\")\n  ) +\n  labs(\n    x = NULL,\n    y = NULL\n  ) +\n  geom_text(aes(y = ypos, label = label), color = \"black\", size = 4) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.major = element_blank(),\n    panel.grid.minor= element_blank(),\n    axis.text.x = element_blank(),\n    axis.ticks = element_blank(),\n    plot.background = element_rect(fill = \"transparent\", colour = NA)\n  )\n\np1 + inset_element(p2,\n                   left = 0.48,\n                   bottom = 0.76,\n                   right = 1.285,\n                   top = 1.2)\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nGender Ratio\n\nThe Female population is slightly higher than the Male population overall.\nThis aligns with Singapore’s national demographic pattern, where Females outnumber Males slightly due to longer life expectancy.\n\n\n\nPopulation Trends (Age 0 - 30)\n\nMales consistently outnumber Females slightly till age 30.\nPopulation rises gradual from birth to age 8.\nA plateau is observed from ages 9 to 20, followed by another increase towards 30.\n\n\n\nPopulation Trends (Age 30 - 60)\n\nThe segment holds the largest proportion of Singapore’s population.\nFemales outnumber Males except for a brief period between age 57-65.\n\n\n\nPopulation Trends (Age Above 60)\n\nA steady decline beings from age 60 onward.\nThe Male population decreases at a faster rate, leading to a widening gender gap with increasing age.\n\n\n\nPopulation Pyramid\n\nThe age distribution resembles that of an ageing population which is consistent with other developed countries.\n\n\n\n\n\n\n1-1: 3.3.4 Reflections and Initial Workings\n\n\n\n\n\n\nReflections\n\n\n\nI initially avoided expanding the data into individual-level observations using uncount(weights = Pop), since it is possible to pass weights = Pop in aes(). However, the resulting violin plot (below) looked weird. Therefore, I tried the uncount() method and found that these 2 methods produces very different plots. Upon further research, I found that while geom_violin() can estimate the probability density function (PDF) using the weights, density estimation with weights may be less precise or behave unexpectedly depending on implementation. Therefore, I chose to use uncount() in the final plot above, as working with raw, individual-level distributions seems to produce more accurate and visually realistic results.\n\n\nFeature Engineering\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ndemography_sex_age_2 &lt;- sg_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop))\n\ndemography_sex_age_2\n\n# A tibble: 182 × 3\n# Groups:   Age [91]\n     Age Sex       Pop\n   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;\n 1     0 Females 14370\n 2     0 Males   15090\n 3     1 Females 15580\n 4     1 Males   16700\n 5     2 Females 17190\n 6     2 Males   17980\n 7     3 Females 17340\n 8     3 Males   18200\n 9     4 Females 19070\n10     4 Males   19880\n# ℹ 172 more rows\n\n\n\n\n\nPlots and Reflections\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=demography_sex_age_2, \n       aes(y = Age, \n           x= Sex,\n           weight = Pop,\n           fill = Sex)) +\n  geom_violin(scale = \"area\") +\n  theme_minimal() +\n  labs(\n    x = \"Sex\",\n    y = \"Age\",\n    title = \"Age Distribution by Sex\"\n  ) +\n  scale_fill_manual(\n    values = c(\n      \"Males\" = \"#88CCEE\",\n      \"Females\" = \"#CC6677\")\n    )",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#singapores-estate-classification",
    "href": "Take-home_Ex/Take-home_Ex01-1/Take-home_Ex01-1.html#singapores-estate-classification",
    "title": "Take-Home Exercise 1-1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "1-1: 5.1 Singapore’s Estate Classification",
    "text": "1-1: 5.1 Singapore’s Estate Classification\n\n\n\n\n\nReference: https://www.hdb.gov.sg/-/media/doc/SCEG/20082023-Annexes/Annex-A1.ashx",
    "crumbs": [
      "Take-Home Exercises",
      "1-1: Demographic Structures and Distribution of Singapore in 2024 (Part 1)"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, animated data visualisation will be created using gganimate and plotly r packages. At the same time, data (i) reshaped by using tidyr package, and (ii) processed, wrangled and transformed with dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot to convey motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it is important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nDoes it make sense to go through the effort of making animated graphs?\n\n\n\nBefore making animated graphs, think of the above question first.\n\nAn animated graphic may not be worth the time investment for just exploratory data analysis.\nHowever, in a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#overview",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, animated data visualisation will be created using gganimate and plotly r packages. At the same time, data (i) reshaped by using tidyr package, and (ii) processed, wrangled and transformed with dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot to convey motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.\n\n\n\n\n\n\n\n\nBefore diving into the steps for creating an animated statistical graph, it is important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nDoes it make sense to go through the effort of making animated graphs?\n\n\n\nBefore making animated graphs, think of the above question first.\n\nAn animated graphic may not be worth the time investment for just exploratory data analysis.\nHowever, in a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#getting-started",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 2 Getting Started",
    "text": "3-2: 2 Getting Started\n\n3-2: 2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: An R library for plotting interactive statistical graphs\ngganimate: A ggplot extension for creating animated statistical graphs\ngifski: Converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colours per frame.\ngapminer: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n3-2: 2.2 Importing the Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;% # mutate_each\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet\nmutate_each_() of dplyr package is used to convert all character data type into factor\nmutate of dplyr package is used to convert data values of Year field into integer\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0.\n\nIn view of this, we will re-write the code by using mutate_at()(link is different from notes) as shown in the code chunk below\nInstead of using mutate_at(), across() can be used to derive the same outputs\n\n\nUsing mutate_at()Using mutate(across())\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;% # mutate_at()\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;% # mutate(across())\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieve the same results!",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 3 Animated Data Visualisation: gganimate Methods",
    "text": "3-2: 3 Animated Data Visualisation: gganimate Methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*(): Defines how the data should be spread out and how it relates to itself across time\nview_*(): Defines how the positional scales should change along the animation\nshadow_*(): Defines how data from other points in time should be presented in the given point in time\nenter_*()/exit_*(): Defines how new data should appear and how old data should disappear during the course of animation\nease_aes(): Defines how different aesthetics should be eased during transitions\n\n\n3-2: 3.1 Building a Static Population Bubble Plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young') \n\n\n\n\n\n\n3-2: 3.2 Building the Animated Bubble Plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year)\nease_aes() is used to control easing of aesthetics. The default is linear.\n\nOther methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#animated-data-visualisation-plotly",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 4 Animated Data Visualisation: plotly",
    "text": "3-2: 4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same ID (which helps facilitate object constancy).\n\n3-2: 4.1 Building an Animated Bubble Plot: ggplotly() Method\nIn this sub-section, an animated bubble plot will be created by using the ggplotly() method.\n\nNew Plot (without legend)CodeOriginal Plot (with legend)\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n3-2: 4.2 Building an Animated Bubble Plot: plot_ly() Method\nIn this sub-section, an animated bubble plot will be created with the plot_ly() method.\n\nplot_ly() Plotplot_ly() Codeggplotly() Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe plot_ly() method is much simpler and easier to read and code compared to the ggplotly() method due to its simpler syntax and fewer layers of customisation.\n\nThe execution time needed for plot_ly() is also lower.\n\n\n\n\n\n3-2: 4.3 Improving Animated Bubble Plot: plot_ly() Method\nChanges implemented: - Bubble size - Added legend\n\nPlotCode3-2: 5 Reference\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(10,600),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by an SMU senior\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, several ggplot2 extensions were used to create a more elegant and effective statistical graphics. By the end of this exercise, the following will be performed:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrtheme packages\nPlot composite figure by combing ggplot2 graphs by using patchwork package",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#overview",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this chapter, several ggplot2 extensions were used to create a more elegant and effective statistical graphics. By the end of this exercise, the following will be performed:\n\nControl the placement of annotation on a graph by using functions provided in ggrepel package\nCreate professional publication quality figure by using functions provided in ggthemes and hrbrtheme packages\nPlot composite figure by combing ggplot2 graphs by using patchwork package",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#getting-started",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 2 Getting started",
    "text": "2: 2 Getting started\n\n2: 2.1 Install and Load the Required Libraries\nIn this exercise, besides tidyverse (Explored in Hands-on Exercised 1), four R packages will be used. They are:\n\nggrepel: an R package providing geoms for ggplot2 to repel overlapping text labels\nggthemes: an R package providing some extra themes, geoms, and scales for ggplot2\nhrbrthemes: an R package providing typography-centric themes and theme components for ggplot2\npatchwork: an R package for preparing composite figure created using ggplot2\n\nCode chunk below will be used to check if these packages have been installed and also load them onto my working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse,stringr)\n\n\n\n2: 2.2 Importing Data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot-annotation-ggrepel",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 3 Beyond ggplot Annotation: ggrepel",
    "text": "2: 3 Beyond ggplot Annotation: ggrepel\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in the examples below.\n\n\n\n\n\nWe simply replace geom_text() by geom_text_repel() and geom_label() with geom_label_repel().\n\n2: 3.1 Working with ggrepel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsing the Repel code modifies the Default Plot such that only non-overlapping labels are shown and the Best-fit Curve is visible now as compared to being blocked by all the labels in the Default Plot.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Section 2.5.1\n\n\n\nDefault CodeWith Repel Code\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Default\")\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"With Repel\")",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-ggplot2-themes",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 4 Beyond ggplot2 Themes",
    "text": "2: 4 Beyond ggplot2 Themes\nggplot2 comes with eight built-in themes. They are:\ntheme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal() and theme_void()\nIn the example below, a plot of “Distribution of Maths Scores” was done using various themes.\n\nDefault Vs Gray Vs GreyOther Built-in Themes 1Other Built-in Themes 2Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_gray() # Change this to different the themes\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe Default, Gray and Grey themes are all the same theme! The default is theme_gray() and theme_grey() is an alias to theme_gray().\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n2: 4.1 Working with ggtheme Packages\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various themes.\n\nggtheme 1ggtheme 2ggtheme 3Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist() # Change this to different themes\n                    # ggtheme2 top right is theme_solid\n\n\n\n\nIt also provides some extra geoms and scales for ggplot2. Consult this vignette to learn more.\n\n\n2: 4.2 Working with hrbrthemes Package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various settings.\n\nDefault theme vs Default theme_ipsum()Default theme_ipsum() vs Modified theme_ipsum()Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") # Default has no theme, and Default theme_ipsum has no extra parameters\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15\ngrid argument is used to remove the x-axis grid lines",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#beyond-single-graph",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5 Beyond Single Graph",
    "text": "2: 5 Beyond Single Graph\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, composite plots will be created by combining multiple graphs. Three statistical graphics will be created using the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\nNext\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\n\n\nLastly, we will draw a scatterplot for English score versuss Maths score as shown below:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(str_wrap(\"English scores versus Maths scores for Primary 3\", width = 30)) +\n  theme(plot.title = element_text(hjust = 0.5, size = 15, face = \"bold\"))\n\n\n\n\n\n2: 5.1 Creating Composite Graphics: patchwork Methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. The ggplot2 extension extension called patchwork  is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax for creating layouts super easily. The general syntax is:\n\nTwo-Column Layout using the Plus sign “+”\nParenthesis “()” to create a subplot group\nTwo-Row Layout using the Division design “/”\n\n\n\n2: 5.2 Combing Two ggplot2 Graphs\nThe figure in the tabset below shows a composite of two histograms created using patchwork. The code and syntax used to create the plot simple!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\n\n\n2: 5.3 Combining Three ggplot2 Graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator to define the sequence of the plotting\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more, refer to Plot Assembly.\n\n\n2: 5.4 Creating a Composite Figure with Tagging\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTake note that the tagging goes from top left -&gt; btm left -&gt; top right -&gt; btm right!\n\n\n\n\n2: 5.5 Creating Figure with Insertion\nPatchwork allows more than just providing functions to place plots next to each other based on the provided layout. With inset_element(), one or several plots or graphic elements can be placed freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)\n\n\n\n\n\n\n2: 5.6 Creating a Composite Figure by Using patchwork and ggtheme\nThe figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#references",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 6 References",
    "text": "2: 6 References\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes Link is broken\nggplot tips: Arranging plots Link is broken\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website was created as part of the coursework for ISSS608: Visual Analytics and Applications, a module under the Master of IT in Business (MITB) program at Singapore Management University (SMU). It was developed using RStudio with Quarto, version-controlled via GitHub, and published through Netlify.\nThe author, Calvin Tan Song Hao, is an aspiring Data Analyst and a current student in the SMU MITB program. With a background in R&D engineering, I aim to leverage my analytical skills and technical expertise to solve real-world problems and uncover data-driven insights that support impactful decision-making.\n\n\n\n\n\n\nNote\n\n\n\nPlease feel free to click on my LinkedIn and GitHub links for more info!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, the basic principles and essential components of ggplot2 will be explored. At the same time, I will develop hands-on experience using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter, I will apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, the basic principles and essential components of ggplot2 will be explored. At the same time, I will develop hands-on experience using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter, I will apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 2 Getting Started",
    "text": "1: 2 Getting Started\n\n1: 2.1 Install and Load the Required Libraries\nThe code chunk below uses p_load() of pacman package to check if tidyverse these packages are installed in the computer. If they are, then they will be launched into R.\nBefore starting, it is important to ensure that the required R packages have been installed. If they are installed, the R packages will be loaded. Otherwise, the the R packages will first be installed then loaded into the R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below assumes that pacman package is already installed. If not, install pacman first.\n\n\n\npacman::p_load(tidyverse, patchwork)\n\n\n\n\n\n\n\nNote\n\n\n\nPatchwork is used for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-On Exercise 2: Section 5.1\n\n\n\n\n1: 2.2 Importing the Data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package since the file is in csv format. The readr part of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe data:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 3 Introducing ggplot",
    "text": "1: 3 Introducing ggplot\n is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics.\n\n\n\n\n\nIt is also part of the tidyverse family specially designed for visual exploration and communication.\n\n\n\n\n\nFor more detail, visit ggplot2.\n\n1: 3.1 R Graphics VS ggplot\nComparing how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\n\n\nTip\n\n\n\nggplot2 gives much more functionalities on how to style the graph",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#grammar-of-graphics",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 4 Grammar of Graphics",
    "text": "1: 4 Grammar of Graphics\nBefore using ggplot2, it is important to understand the principles of Grammer of Graphics.\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n1: 4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 5 Essential Grammatical Elements in ggplot2: Data",
    "text": "1: 5 Essential Grammatical Elements in ggplot2: Data\nLet us call the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears\nggplot() initializes a ggplot object\nThe data argument defines the dataset to be used for plotting\nIf the dataset is not already a data.frame, it will be converted to one by fortify()",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 6 Essential Grammatical Elements in ggplot2: Aesthetic Mappings",
    "text": "1: 6 Essential Grammatical Elements in ggplot2: Aesthetic Mappings\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification).\nThe code chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAll aesthetics of a plot are specified in the aes() function call and the code above adds MATHS to the x-axis\nggplot includes the x-axis and the axis’s label",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7 Essential Grammatical Elements in ggplot2: geom",
    "text": "1: 7 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function)\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n1: 7.1 Geometric Objects: geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if I want to show the code only or the graph only?\n\n\n\n\n\n\n\nUse #| eval: false to show code without plotting graph\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\nUse #| echo: false to plot graph without showing code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\neval and echo is very useful in patchwork and panel-tabset\n\n\n\n\n\n1: 7.2 Geometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5) +\n  ggtitle(\"With y-axis\")\n\nd2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL) +\n  ggtitle(\"Without y-axis\")\n\nd1 + d2\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-On Exercise 2: Section 5.1\n\n\n\n\n1: 7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNote that the default bin is 30\n\n\n\n\n\n1: 7.4 Modifying a geometric object by changing geom()\nIn the code chunk below:\n\nBins argument is used to change the number of bins to 20,\nFill argument is used to shade the histogram with light blue color, and\nColor argument is used to change the outline colour of the bars in black\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  +\n  ggtitle(\"Default\")\n\nh2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh1 + h2\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAdjusting bin size fixes the gap and adding colour makes the plot more visually appealing\n\n\n\n\n\n1: 7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh4 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")  +\n  ggtitle(\"Adding Subgroup\")\n\nh3 + h4\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nUsing sub-groups allows for bivariate analysis\nThis approach can be used to adjust colour, fill and alpha of the geometric elements\n\n\n\n\n\n1: 7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nLeft Graph: Plots the distribution of Maths scores in a kernel density estimate plot\nRight Graph: Plots two kernel density lines by using colour or fill arguments of aes()\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() +\n  ggtitle(\"Default\")\n\nk2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  ggtitle(\"Gender Sub-group\")\n\nk1 + k2\n\n\n\n\n\n\n1: 7.7 Geometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nLeft Graph: Plots boxplots by using geom_boxplot().\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nRight Graph: Plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot() +\n  ggtitle(\"Default\")\n\nb2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n  ggtitle(\"Notched\")\n\nb1 + b2\n\n\n\n\n\n\n1: 7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions since they are placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1: 7.9 Geometric Objects: Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()  \n\n\n\n\n\n\n\n\n\n\n1: 7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 8 Essential Grammatical Elements in ggplot2: Stat",
    "text": "1: 8 Essential Grammatical Elements in ggplot2: Stat\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nFrequency of values of a variable (bar graph)\n\nA mean\nA confidence limit\n\nThere are two ways to use these functions:\n\nAdd a stat_() function and override the default geom, or\nAdd a geom_() function and override the default stat\n\n\n\n1: 8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n1: 8.2 Working with stat - the stat_summary() method\nThe left graph adds mean values by using stat_summary() function and overriding the default geom.\n\n\n1: 8.3 Working with stat - the geom() method\nThe right graph adds mean values by using geom_() function and overriding the default stat.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4) +\n  ggtitle(\"stat_summary() method\")\n\ns2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"geom_() method\")\n\ns1 + s2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieves the same result by adding a red marker to represent the mean.\n\n\n\n\n1: 8.4 Adding a Best-Fit Curve on a Scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best-fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nLeft Graph: geom_smooth() is used to plot a best-fit curve on the scatterplot.\nRight Graph: The default smoothing method is overridden to show a linear best fit-line.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\nf2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\nf1 + f2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 9 Essential Grammatical Elements in ggplot2: Facets",
    "text": "1: 9 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_wrap() and facet_grid().\n\n1: 9.1 Working with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid() because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1: 9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfacet_grid() is also ideal for displaying sequential variables like the performance of different classes. For the above example, facet_grid() is better than facet_wrap() since it allows easiy comparisons across all classes.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 10 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "1: 10 Essential Grammatical Elements in ggplot2: Coordinates\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n\ncoord_cartesian(): The default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out)\ncoord_flip(): A cartesian system with the x and y flipped\ncoord_fixed(): A cartesian system with a “fixed” aspect ratio (e.g. 1.78 for a “widescreen” plot)\ncoord_quickmap(): A coordinate system that approximates a good aspect ratio for maps\n\n\n1: 10.1 Working with Coordinate\n\nLeft Graph: By the default, the bar chart of ggplot2 is in vertical form\nRight Graph: coord_flip() flips the horizontal bar chart into vertical bar chart\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb3 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  ggtitle(\"Default\")\n\nb4 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  ggtitle(\"coord_flip()\")\n\nb3 + b4\n\n\n\n\n\n\n1: 10.1 Changing the y- and x-axis Range\n\nLeft Graph: The default scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\nRight Graph: Fixed both the y-axis and x-axis range from 0-100.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  ggtitle(\"Default\")\n\nr2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Equal y- and x-axis Range\")\n\nr1 + r2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-themes",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 11 Essential Grammatical Elements in ggplot2: Themes",
    "text": "1: 11 Essential Grammatical Elements in ggplot2: Themes\nThemes control elements of the graph not related to the data. For example:\n\nBackground colour\nSize of fonts\nGridlines\nColour of labels\n\nBuilt-in themes include:\n\ntheme_gray() (default)\ntheme_bw()\ntheme_classic()\n\nA list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n\n\n\n\n\nNote\n\n\n\nThemes can make the plots more visually appealing. The available built-in themes are: theme_grey(), theme_gray(), theme_bw(), theme_linedraw(), theme_light() theme_dark(), theme_minimal(), theme_classic(), theme_void() and theme_test()\n\n\n\nDefault Vs Gray Vs GreyOther Built-in Themes 1Other Built-in Themes 2Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray() + # Change this to the different themes\n  ggtitle(\"theme\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe Default, Gray and Grey themes are all the same theme! The default is theme_gray() and theme_grey() is an alias to theme_gray().",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 12 Reference",
    "text": "1: 12 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper - Components\nLearning ggplot2 on Paper - Layer\nLearning ggplot2 on Paper - Scale",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#learning-outcome",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by ggiraph and plotlyr packages.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#getting-started",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 2 Getting Started",
    "text": "3-1: 2 Getting Started\nFirst, write a code chunk to check, install and launch the following R packages:\n\nggiraph: For making ‘ggplot’ graphics interactive\nplotly: An R library for plotting interactive statistical graphs\nDT: Provides an R interface to the JavaScript library DataTables that create interactive table on html page\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork: For combining multiple ggplot2 graphs into one figure.\n\nThe code chunk below will be used to accomplish the task.\n\npacman::p_load(ggiraph, plotly,\n               patchwork, DT, tidyverse)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#importing-data",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 3 Importing Data",
    "text": "3-1: 3 Importing Data\nIn this section, Exam_data.csv provided will be used. Using read_csv() of readr package, import Exam_data.csv into R.\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 4 Interactive Data Visualisation - ggiraph Methods",
    "text": "3-1: 4 Interactive Data Visualisation - ggiraph Methods\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: A column of data-sets that contain tooltips to be displayed when the mouse is over elements\nOnclick: A column of data-sets that contain a JavaScript function to be executed when elements are clicked\nData_id: A column of data-sets that contain an id to be associated with elements\n\nIf it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n3-1: 4.1 Tooltip Effect with Tooltip Aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 5 Interactivity",
    "text": "3-1: 5 Interactivity\nBy hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n3-1: 5.1 Displaying Multiple Information on Tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity-1",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactivity-1",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6 Interactivity",
    "text": "3-1: 6 Interactivity\n\n\n\n\n\n\nNote\n\n\n\nBy hovering the mouse pointer on a data point of interest, the student’s ID and CLASS are displayed.\n\n\n\n\n\n\n\n\n\n3-1: 6.1 Customising Tooltip Style\nCode chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css &lt;- \"background-color: white;  #&lt;&lt;\nfront-style:bold; color: #ff0000;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe background colour of the tooltip is white and the font colour is red and bold\nRefer to Customizing girafe objects to learn more about how to customise ggriaph objects\n\n\n\n\n\n3-1: 6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n3-1: 6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.\n\n\n\n\n3-1: 6.4 Styling Hover Effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly\n\n\n\n\n3-1: 6.5 Combining Tooltip and Hover Effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\n\n\n\n3-1: 6.6 Click Effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.\n\n\n\n\n3-1: 6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---plotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---plotly-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1.7 Interactive Data Visualisation - plotly Method",
    "text": "3-1.7 Interactive Data Visualisation - plotly Method\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\n\n\n\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n3-1: 7.1 Creating an Interactive Scatter Plot: plot_ly() Method\nThe tabset below shows an example of a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe code using plot_ly() is simpler than ggplot2\nplot_ly() is interactive by default as compared to ggplot2 Hands-On Exercise 3-1: Section 1.5\n\n\n\n\n\n3-1: 7.2 Working with Visual Variable: plot_ly() Method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nClick on the colour symbol at the legend\n\n\n\n\n3-1: 7.3 Creating an Interactive Scatter Plot: ggplotly() Method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that the only extra line needed in the code chunk is ggplotly().\nThis is much simpler as compared to the ggplot2 tooltip method in Hands-On Exercise 3-1: Section 5.1\n\n\n\n\n\n3-1: 7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\nTwo scatter plots will be created by using ggplot2 functions.\nLastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected. - But clicking on any data point results in a permanent selection, with no way to deselect it.\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight_key() simply creates object of class crosstalk::SharedData\nLearn more about crosswalk\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis code is much simpler than the ggiraph method in Hands-On Exercise 3-1: Section 6.7,\nAnother difference is that the plotly highlight_key() method shows it’s corresponding point on click but the ggiraph method shows it’s corresponding point on hover\n\n\n\n\n\n3-1: 7.5 Improving Coordinated Multiple Views with plotly\nThere are a few issues with the coordinated multiple view plot above.\n\n\n\n\n\n\nHow to fix the annoying permanent selection issue?\n\n\n\nAdding selectize = FALSE allows for the user to do a double-click on any blank space to reset selection and shows all points again\n\n\n\n\n\n\n\n\nCan the selection method be on hover instead of on click?\n\n\n\n\nBy default, highlight_key() works on click, not hover but using plotly_hover allows it to mirror the ggiraph method in Hands-On Exercise 3-1: Section 6.7\n\n\n\n\n\n\n\n\n\nLastly, where are the axis labels?\n\n\n\n\nUse labs(), titleX and titleY to add axis labels\nUse margin so that the labels will not overlap the graph\n\n\n\nThe plot below implements the solutions to the questions above.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"ENGLISH\")\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"SCIENCE\")\n\nsubplot(\n  ggplotly(p1),\n  ggplotly(p2),\n  titleX = TRUE,\n  titleY = TRUE,\n  margin = 0.05) %&gt;%\n  highlight(on = \"plotly_hover\", selectize = FALSE)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-visualisation---crosstalk-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 8 Interactive Data Visualisation - crosstalk Method",
    "text": "3-1: 8 Interactive Data Visualisation - crosstalk Method\ncrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n3-1: 8.1 Interactive Data Table: DT Package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nTableCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n3-1: 8.2 Linked Brushing: crosstalk Method\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)       \n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-datatable",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-datatable",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 8.3 Improving DataTable",
    "text": "3-1: 8.3 Improving DataTable\nThe DataTables above have 2 extra columns (tooltip and onclick). This is because they were added in Hands-On Exercise 3-1: Section 5.1 for tooltip and in Hands-On Exercise 3-1: Section 6.6 for onclick.\nA new dataset will be read to view how the DataTable should look like without the additional columns.\n\nexam_data_2 &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\n\n\n\nNote\n\n\n\npageLength is used to set the default number of entries to 5 for a more compact table\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(exam_data_2, \n              class = \"compact\",\n              options = list(\n                pageLength = 5)\n)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-crosstalk-table",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-crosstalk-table",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 8.4 Improving crosstalk Table",
    "text": "3-1: 8.4 Improving crosstalk Table\nThe crosstalk table in Hands-On Exercise 3-1: Section 8.2 has a very long DataTable on the right. This requires horizontal scrolling of the DataTable which is not an ideal user interface design. Therefore, the crosstalk layout has been changed from side-by-side to top-and-bottom by setting width to 12.\n\n\n\n\n\n\nNote\n\n\n\n\nAlso applied compact class and set the default entity size to 5\nUsed layout() control the size of the plot to be a square shape since the axis are equal\nUsed div() to control the height allocated to the plot\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThis crosstalk table is more compact and user friendly by showing all the necessary information without unnecessary scrolling!\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# library(htmltools)\n\nd &lt;- highlight_key(exam_data_2)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(\n  ggplotly(p) %&gt;% layout(height = 300, width = 300),\n  \"plotly_selected\"\n)\n\ncrosstalk::bscols(\n  widths = 12,\n  div(style = \"height: 300px;\", gg),\n  DT::datatable(d, \n                class = \"compact\",\n                options = list(pageLength = 5))\n)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#reference",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 9 Reference",
    "text": "3-1: 9 Reference\n\n3-1: 9.1 ggiraph\nThis link provides an online version of the reference guide and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n3-1: 9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this link\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nThis link provides a very interesting implementation of gganimate by an SMU senior.\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Visual Analytics and Applications",
    "section": "",
    "text": "Reference: Picture Link\nThis webpage serves as a portfolio showcasing my coursework for ISSS608: Visual Analytics and Applications at Singapore Management University (SMU).\nThroughout the course, I gained hands-on experience in using RStudio for implementing various data visualization techniques, as well as Tableau for creating interactive dashboards. I also developed an understanding of version control using GitHub and learned how to publish analytical reports and dashboards using Quarto and deploy them as a website via Netlify. This portfolio reflects the practical skills and concepts I acquired in the course.\n\n\n\n\n\n\nNote\n\n\n\nPlease use the toggle at the top right to switch between light and dark mode based on your preference!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-2/Take-home_Ex01-2.html",
    "href": "Take-home_Ex/Take-home_Ex01-2/Take-home_Ex01-2.html",
    "title": "Take-Home Exercise 1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "The next phase of the exercise involves selecting one submission provided by my classmate, critiquing three good design principles and identifying three areas for further improvement. Based on these feedbacks, I will prepare the makeover version of their data visualisation.\nMy chosen classmate’s work will be the submission by RAJESH BABU SANTIGARI.\n\n\n\npacman::p_load(tidyverse, patchwork, ggthemes, knitr, cowplot)\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nraj_data &lt;- read_csv(\"data/respopagesex2024.csv\")\n\npyramid_data &lt;- raj_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(title = \"Singapore Population Pyramid (2024)\",\n       x = \"Age\", y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n# Feature Engineering\nmakeover_data &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nmakeover_data$Age &lt;- as.character(makeover_data$Age)\n\nmakeover_data$Age[makeover_data$Age == \"90_and_Over\"] &lt;- \"90\"\n\nmakeover_data$Age &lt;- as.numeric(makeover_data$Age)\n\npyramid_data &lt;- makeover_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(inv_Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nr1 &lt;- ggplot(pyramid_data, aes(x = Age, y = inv_Pop, fill = Sex)) +\n  geom_area(stat = \"identity\", colour = \"grey30\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs, limits = c(-40000, 40000)) +\n  scale_x_continuous(breaks = seq(0, 90, by = 10), position = \"top\") +\n  labs(title = \"Singapore's Population Pyramid (2024)\",\n       x = NULL, y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.margin = margin(0.2, 0, 0.2, 0.2, \"cm\")\n  ) +  \n  scale_fill_manual(\n    name = \"Sex\",\n    values = c(\n      \"Males\" = \"#56BCC2\",\n      \"Females\" = \"#E87D72\"),\n    breaks = c(\"Males\", \"Females\")\n  )\n\nr2 &lt;- ggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_area(stat = \"identity\", position = \"identity\", alpha = 0.5, width = 1, colour = \"grey30\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs, limits = c(0, 40000)) +\n  scale_x_continuous(breaks = seq(0, 90, by = 10)) +\n  labs(x = \"Age\", y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(0.2, 0.2, 0.2, 0, \"cm\")\n  )\n\nr1 + r2 +\n  plot_layout(widths = c(3, 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe horizontal bar chart of Population across Age, with Males on the left and Females on the right, clearly demonstrates his design intent of creating a population pyramid segmented by Sex.\nThe use of colours effectively distinguishes the Genders, with Males in blue and Females in red.\nThe inclusion of a clear title and legend reinforces the design intent by specifying that the chart represents Singapore’s Population Pyramid for the year 2024 and confirms the Gender colour association.\n\n\n\n\n\n\n\n\n\nPoor Design Choices and My Improvements\n\n\n\n\nThe y-axis is overly clustered with numbers overlapping, making it difficult to read.\n\nImprovements: Converted the string label 90_and_Over to an integer value of 90, and formated the y-axis to display in increments of 10.\n\nSome sections of the bar chart display a white divider between bars, while others do not, resulting in an inconsistent and a messy appearence. It is also difficult to compare Gender populations at specific Ages.\n\nImprovements: An area chart with black outlines was used instead of a bar chart for a cleaner visual. Additionally, a comparative overlay chart was placed to the right of the plot to facilitate easy comparisons between Male and Female populations.\n\nThe Male and Female charts uses different x-axis scales, which misleadingly suggests similar population sizes. Additionally, the legend order (Females → Males) does not match the chart order (Males → Females).\n\nImprovements: Standardised the x-axis for both Genders to 0-40,000. The legend was also reordered to reflect the chart layout (Males → Females).\n\n\n\n\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ntop_pa &lt;- raj_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10)\n\nggplot(top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top 10 Most Populous Planning Areas (2024)\",\n       x = \"Planning Area\", y = \"Total Population\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nregion_mapping &lt;- tibble::tibble(\n  PA = c(\n    # Central\n    \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n    \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\",\n    \"Queenstown\", \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\",\n    \"Tanglin\", \"Toa Payoh\",\n\n    # East\n    \"Bedok\", \"Changi\", \"Pasir Ris\", \"Tampines\",\n\n    # North-East\n    \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\", \"Seletar\",\n\n    # North\n    \"Mandai\", \"Sembawang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\",\n\n    # West\n    \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n    \"Jurong West\", \"Tengah\", \"Western Water Catchment\"\n  ),\n  Region = c(\n    rep(\"Central\", 19),\n    rep(\"East\", 4),\n    rep(\"North-East\", 6),\n    rep(\"North\", 5),\n    rep(\"West\", 8)\n  )\n)\n\n# Join with data\nmakeover_data &lt;- makeover_data %&gt;%\n  left_join(region_mapping, by = \"PA\")\n\nregion_pa &lt;- makeover_data %&gt;%\n  group_by(PA, Region) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  filter(Total_Pop &gt; 0)\n\nregion_pa_order &lt;- region_pa %&gt;%\n  distinct(PA, Total_Pop) %&gt;%\n  arrange(Total_Pop) %&gt;%\n  pull(PA)\n\nregion_pa &lt;- region_pa %&gt;%\n  mutate(\n    PA = factor(PA, levels = region_pa_order)\n    )\n\nr1 &lt;- ggplot(region_pa, aes(x = PA, y = Total_Pop, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Most Populous Planning Areas (2024)\",\n       x = \"Planning Area\", y = \"Total Population\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nbottom10 &lt;- region_pa %&gt;%\n  filter(PA %in% head(pa_order, 10))\n\nr2 &lt;- ggplot(data = bottom10, \n       aes(x = PA, y = Total_Pop, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  theme_test() +\n  labs(\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"transparent\", colour = NA)\n  )\n\nzoom_rect &lt;- ggplot() +\n  geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1),\n            fill = NA, color = \"steelblue\", linetype = \"dashed\") +\n  theme_void()\n\nggdraw() +\n  draw_plot(r1, 0, 0, 1, 1) +\n  draw_plot(r2, 0.4, 0.185, 0.56, 0.25) +\n  draw_plot(zoom_rect, 0.005, 0.155, 0.3, 0.206) +\n  draw_plot(zoom_rect, 0.37, 0.18, 0.62, 0.27) # (left , btm, right, top)\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe graph displaying the Top 10 Most Populous Planning Areas in Singapore is clean and easy to interpret.\nThe title is appropriate for the graph and informative.\nAxis are correctly labelled with Planning Area and Total Population, aiding interpretation.\n\n\n\n\n\n\n\n\n\nBad Design Choices and My Improvements\n\n\n\n\nThe x-axis uses scientific notation, which is not reader-friendly.\n\nImprovements: Changed the axis formatting to use standard numerical values with comma-separators for thousands.\n\nThe graph is overly simplistic and lacks depth, missing an opportunity to provide broader insights into Singapore’s Demographic distribution.\n\nImprovements: Added a secondary Region field to segment the Planning Areas, highlighting, for example, that less populous Planning Areas tend to cluster in the Central region.\n\nThe graph excludes data on the remaining Planning Areas in Singapore.\n\nImprovements: Expanded the chart to include all populated Planning Areas, and introduced a zoomed-in section for the 10 least populous Planning Areas for better clarity on their regional classification.\n\n\n\n\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ngender_ratio &lt;- raj_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  filter(!is.na(Males) & !is.na(Females) & Females &gt; 0) %&gt;%  \n  mutate(Gender_Ratio = Males / Females)\n\nggplot(gender_ratio, aes(x = reorder(PA, Gender_Ratio), y = Gender_Ratio)) +\n  geom_col(fill = \"purple\") +\n  coord_flip() +\n  labs(title = \"Gender Ratio (Males/Females) by Planning Area (2024)\",\n       x = \"Planning Area\", y = \"Gender Ratio\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ngender_ratio &lt;- makeover_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(\n    TotalInGroup = sum(Total_Pop),\n    Proportion = Total_Pop / TotalInGroup * 100) %&gt;%\n  filter(!is.na(Proportion))\n\ngender_ratio_males &lt;- gender_ratio %&gt;%\n  filter(Sex == \"Males\")\n\ngender_ratio_order &lt;- gender_ratio_males %&gt;%\n  arrange(Proportion) %&gt;%\n  pull(PA)\n\ngender_ratio &lt;- gender_ratio %&gt;%\n  mutate(\n    PA = factor(PA, levels = gender_ratio_order)\n    )\n\nggplot(gender_ratio, aes(x = Proportion, y = PA, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(xintercept = 50, color = \"purple\", linetype = \"dashed\", linewidth = 1) + \n  labs(\n    title = \"Gender Ratio (Males/Females) by Planning Area (2024)\",\n    x = \"Percentage\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(hjust = 0.5),\n    plot.title = element_text(hjust = 0.5,size = 10, face = \"bold\"),\n    legend.position = \"bottom\"\n  ) +  \n  scale_fill_manual(\n    name = \"Sex\",\n    values = c(\n      \"Males\" = \"#56BCC2\",\n      \"Females\" = \"#E87D72\"),\n    breaks = c(\"Males\", \"Females\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe graph is appropriately ordered, making it easy to identify which Planning Areas have higher Gender Ratios.\nThe title is concise and descriptive.\nThe axis are correctly labelled with Planning Area and Gender Ratio to clarify the data shown.\n\n\n\n\n\n\n\n\n\nBad Design Choices and My Improvements\n\n\n\n\nThe graph is difficult to understand since the concept of Gender Ratio is not intuitive. A value of 1 signifies equal numbers of Males and Females, while values above 1 indicates more Males.\n\nImprovements: Replaced the ratio with a percentage distribution. The length of the Male/Female bar can then reflect their relative share within each Planning Area.\n\nThe y-axis, listing the Planning Areas, is crowded and lacks visual separation.\n\nImprovements: Increased the plot height using #| fig-height: 6 to improve readability and add space between the Planning Area labels.\n\nThe x-axis range (0 to ~1.1) does not represent the full spectrum of Gender Ratio, which should ideally be 0 to 2, with 1 as the median. This median is also missing from the graph.\n\nImprovements: Redefined the x-axis to span 0-100, and included a vertical line at 50 to denote the midpoint. Any bar exceeding this line indicates a Male-dominant area while those that do not reflect a Female-dominant one."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01-2/Take-home_Ex01-2.html#visualisations",
    "href": "Take-home_Ex/Take-home_Ex01-2/Take-home_Ex01-2.html#visualisations",
    "title": "Take-Home Exercise 1: Demographic Structures and Distribution of Singapore in 2024",
    "section": "",
    "text": "pacman::p_load(tidyverse, patchwork, ggthemes, knitr, cowplot)\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nraj_data &lt;- read_csv(\"data/respopagesex2024.csv\")\n\npyramid_data &lt;- raj_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs) +\n  labs(title = \"Singapore Population Pyramid (2024)\",\n       x = \"Age\", y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\n# Feature Engineering\nmakeover_data &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nmakeover_data$Age &lt;- as.character(makeover_data$Age)\n\nmakeover_data$Age[makeover_data$Age == \"90_and_Over\"] &lt;- \"90\"\n\nmakeover_data$Age &lt;- as.numeric(makeover_data$Age)\n\npyramid_data &lt;- makeover_data %&gt;%\n  group_by(Age, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  mutate(inv_Pop = ifelse(Sex == \"Males\", -Pop, Pop))\n\nr1 &lt;- ggplot(pyramid_data, aes(x = Age, y = inv_Pop, fill = Sex)) +\n  geom_area(stat = \"identity\", colour = \"grey30\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs, limits = c(-40000, 40000)) +\n  scale_x_continuous(breaks = seq(0, 90, by = 10), position = \"top\") +\n  labs(title = \"Singapore's Population Pyramid (2024)\",\n       x = NULL, y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    plot.margin = margin(0.2, 0, 0.2, 0.2, \"cm\")\n  ) +  \n  scale_fill_manual(\n    name = \"Sex\",\n    values = c(\n      \"Males\" = \"#56BCC2\",\n      \"Females\" = \"#E87D72\"),\n    breaks = c(\"Males\", \"Females\")\n  )\n\nr2 &lt;- ggplot(pyramid_data, aes(x = Age, y = Pop, fill = Sex)) +\n  geom_area(stat = \"identity\", position = \"identity\", alpha = 0.5, width = 1, colour = \"grey30\") +\n  coord_flip() +\n  scale_y_continuous(labels = abs, limits = c(0, 40000)) +\n  scale_x_continuous(breaks = seq(0, 90, by = 10)) +\n  labs(x = \"Age\", y = \"Population\",\n       fill = \"Sex\") +\n  theme_minimal() +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(0.2, 0.2, 0.2, 0, \"cm\")\n  )\n\nr1 + r2 +\n  plot_layout(widths = c(3, 1))\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe horizontal bar chart of Population across Age, with Males on the left and Females on the right, clearly demonstrates his design intent of creating a population pyramid segmented by Sex.\nThe use of colours effectively distinguishes the Genders, with Males in blue and Females in red.\nThe inclusion of a clear title and legend reinforces the design intent by specifying that the chart represents Singapore’s Population Pyramid for the year 2024 and confirms the Gender colour association.\n\n\n\n\n\n\n\n\n\nPoor Design Choices and My Improvements\n\n\n\n\nThe y-axis is overly clustered with numbers overlapping, making it difficult to read.\n\nImprovements: Converted the string label 90_and_Over to an integer value of 90, and formated the y-axis to display in increments of 10.\n\nSome sections of the bar chart display a white divider between bars, while others do not, resulting in an inconsistent and a messy appearence. It is also difficult to compare Gender populations at specific Ages.\n\nImprovements: An area chart with black outlines was used instead of a bar chart for a cleaner visual. Additionally, a comparative overlay chart was placed to the right of the plot to facilitate easy comparisons between Male and Female populations.\n\nThe Male and Female charts uses different x-axis scales, which misleadingly suggests similar population sizes. Additionally, the legend order (Females → Males) does not match the chart order (Males → Females).\n\nImprovements: Standardised the x-axis for both Genders to 0-40,000. The legend was also reordered to reflect the chart layout (Males → Females).\n\n\n\n\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ntop_pa &lt;- raj_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 10)\n\nggplot(top_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_col(fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Top 10 Most Populous Planning Areas (2024)\",\n       x = \"Planning Area\", y = \"Total Population\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nregion_mapping &lt;- tibble::tibble(\n  PA = c(\n    # Central\n    \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n    \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\",\n    \"Queenstown\", \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\",\n    \"Tanglin\", \"Toa Payoh\",\n\n    # East\n    \"Bedok\", \"Changi\", \"Pasir Ris\", \"Tampines\",\n\n    # North-East\n    \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\", \"Seletar\",\n\n    # North\n    \"Mandai\", \"Sembawang\", \"Sungei Kadut\", \"Woodlands\", \"Yishun\",\n\n    # West\n    \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n    \"Jurong West\", \"Tengah\", \"Western Water Catchment\"\n  ),\n  Region = c(\n    rep(\"Central\", 19),\n    rep(\"East\", 4),\n    rep(\"North-East\", 6),\n    rep(\"North\", 5),\n    rep(\"West\", 8)\n  )\n)\n\n# Join with data\nmakeover_data &lt;- makeover_data %&gt;%\n  left_join(region_mapping, by = \"PA\")\n\nregion_pa &lt;- makeover_data %&gt;%\n  group_by(PA, Region) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  filter(Total_Pop &gt; 0)\n\nregion_pa_order &lt;- region_pa %&gt;%\n  distinct(PA, Total_Pop) %&gt;%\n  arrange(Total_Pop) %&gt;%\n  pull(PA)\n\nregion_pa &lt;- region_pa %&gt;%\n  mutate(\n    PA = factor(PA, levels = region_pa_order)\n    )\n\nr1 &lt;- ggplot(region_pa, aes(x = PA, y = Total_Pop, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Most Populous Planning Areas (2024)\",\n       x = \"Planning Area\", y = \"Total Population\") +\n  theme_minimal() +\n  scale_y_continuous(labels = scales::comma) +\n  theme(\n    legend.position = \"bottom\"\n  )\n\nbottom10 &lt;- region_pa %&gt;%\n  filter(PA %in% head(pa_order, 10))\n\nr2 &lt;- ggplot(data = bottom10, \n       aes(x = PA, y = Total_Pop, fill = Region)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  theme_test() +\n  labs(\n    x = NULL,\n    y = NULL\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.background = element_rect(fill = \"transparent\", colour = NA)\n  )\n\nzoom_rect &lt;- ggplot() +\n  geom_rect(aes(xmin = 0, xmax = 1, ymin = 0, ymax = 1),\n            fill = NA, color = \"steelblue\", linetype = \"dashed\") +\n  theme_void()\n\nggdraw() +\n  draw_plot(r1, 0, 0, 1, 1) +\n  draw_plot(r2, 0.4, 0.185, 0.56, 0.25) +\n  draw_plot(zoom_rect, 0.005, 0.155, 0.3, 0.206) +\n  draw_plot(zoom_rect, 0.37, 0.18, 0.62, 0.27) # (left , btm, right, top)\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe graph displaying the Top 10 Most Populous Planning Areas in Singapore is clean and easy to interpret.\nThe title is appropriate for the graph and informative.\nAxis are correctly labelled with Planning Area and Total Population, aiding interpretation.\n\n\n\n\n\n\n\n\n\nBad Design Choices and My Improvements\n\n\n\n\nThe x-axis uses scientific notation, which is not reader-friendly.\n\nImprovements: Changed the axis formatting to use standard numerical values with comma-separators for thousands.\n\nThe graph is overly simplistic and lacks depth, missing an opportunity to provide broader insights into Singapore’s Demographic distribution.\n\nImprovements: Added a secondary Region field to segment the Planning Areas, highlighting, for example, that less populous Planning Areas tend to cluster in the Central region.\n\nThe graph excludes data on the remaining Planning Areas in Singapore.\n\nImprovements: Expanded the chart to include all populated Planning Areas, and introduced a zoomed-in section for the 10 least populous Planning Areas for better clarity on their regional classification.\n\n\n\n\n\n\n\n\nRajesh’sMy Improvements\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ngender_ratio &lt;- raj_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  pivot_wider(names_from = Sex, values_from = Pop) %&gt;%\n  filter(!is.na(Males) & !is.na(Females) & Females &gt; 0) %&gt;%  \n  mutate(Gender_Ratio = Males / Females)\n\nggplot(gender_ratio, aes(x = reorder(PA, Gender_Ratio), y = Gender_Ratio)) +\n  geom_col(fill = \"purple\") +\n  coord_flip() +\n  labs(title = \"Gender Ratio (Males/Females) by Planning Area (2024)\",\n       x = \"Planning Area\", y = \"Gender Ratio\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\ngender_ratio &lt;- makeover_data %&gt;%\n  group_by(PA, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(\n    TotalInGroup = sum(Total_Pop),\n    Proportion = Total_Pop / TotalInGroup * 100) %&gt;%\n  filter(!is.na(Proportion))\n\ngender_ratio_males &lt;- gender_ratio %&gt;%\n  filter(Sex == \"Males\")\n\ngender_ratio_order &lt;- gender_ratio_males %&gt;%\n  arrange(Proportion) %&gt;%\n  pull(PA)\n\ngender_ratio &lt;- gender_ratio %&gt;%\n  mutate(\n    PA = factor(PA, levels = gender_ratio_order)\n    )\n\nggplot(gender_ratio, aes(x = Proportion, y = PA, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  geom_vline(xintercept = 50, color = \"purple\", linetype = \"dashed\", linewidth = 1) + \n  labs(\n    title = \"Gender Ratio (Males/Females) by Planning Area (2024)\",\n    x = \"Percentage\",\n    y = \"Planning Area\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(hjust = 0.5),\n    plot.title = element_text(hjust = 0.5,size = 10, face = \"bold\"),\n    legend.position = \"bottom\"\n  ) +  \n  scale_fill_manual(\n    name = \"Sex\",\n    values = c(\n      \"Males\" = \"#56BCC2\",\n      \"Females\" = \"#E87D72\"),\n    breaks = c(\"Males\", \"Females\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\nGood Design Choices\n\n\n\n\nThe graph is appropriately ordered, making it easy to identify which Planning Areas have higher Gender Ratios.\nThe title is concise and descriptive.\nThe axis are correctly labelled with Planning Area and Gender Ratio to clarify the data shown.\n\n\n\n\n\n\n\n\n\nBad Design Choices and My Improvements\n\n\n\n\nThe graph is difficult to understand since the concept of Gender Ratio is not intuitive. A value of 1 signifies equal numbers of Males and Females, while values above 1 indicates more Males.\n\nImprovements: Replaced the ratio with a percentage distribution. The length of the Male/Female bar can then reflect their relative share within each Planning Area.\n\nThe y-axis, listing the Planning Areas, is crowded and lacks visual separation.\n\nImprovements: Increased the plot height using #| fig-height: 6 to improve readability and add space between the Planning Area labels.\n\nThe x-axis range (0 to ~1.1) does not represent the full spectrum of Gender Ratio, which should ideally be 0 to 2, with 1 as the median. This median is also missing from the graph.\n\nImprovements: Redefined the x-axis to span 0-100, and included a vertical line at 50 to denote the midpoint. Any bar exceeding this line indicates a Male-dominant area while those that do not reflect a Female-dominant one."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. The following will be explored in this exercise:\n\nPlotting funnel plots using funnelPlotR package\nPlotting static funnel plot with ggplot2 package\nplotting interactive funnel plot by using both plotly R and ggplot2 packages",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#overview",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. The following will be explored in this exercise:\n\nPlotting funnel plots using funnelPlotR package\nPlotting static funnel plot with ggplot2 package\nplotting interactive funnel plot by using both plotly R and ggplot2 packages",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#install-and-launch-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#install-and-launch-r-packages",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 2 Install and Launch R Packages",
    "text": "4-1: 2 Install and Launch R Packages\nThese four R packages will be used:\n\nreadr: Import csv to R\nFunnerPlotR: Create funnel plot\nggplot2: Create funnel plot manually\nknitr: Build static html table\nplotly: Create interactive funnel plot\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#import-data",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 3 Import Data",
    "text": "4-1: 3 Import Data\nThe following data will be used for this exercise: COVID-19_DKI_Jakarta. It can be downloaded from Open Data Covid-19 Provinsi DKI Jakarta portal. In this exercise, the cumulative COVID-19 cases will be compared to the death by sub-district (i.e. kelurahan) as of 31st July 2021, DKI Jakarta.\nFirst, the data will be imported into R and save it into a tibble data frame object called covid19.\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)\n\n\n\n\n\n\n\n\n\n\n\n\n\nSub-district ID\nCity\nDistrict\nSub-district\nPositive\nRecovered\nDeath\n\n\n3172051003\nJAKARTA UTARA\nPADEMANGAN\nANCOL\n1776\n1691\n26\n\n\n3173041007\nJAKARTA BARAT\nTAMBORA\nANGKE\n1783\n1720\n29\n\n\n3175041005\nJAKARTA TIMUR\nKRAMAT JATI\nBALE KAMBANG\n2049\n1964\n31\n\n\n3175031003\nJAKARTA TIMUR\nJATINEGARA\nBALI MESTER\n827\n797\n13\n\n\n3175101006\nJAKARTA TIMUR\nCIPAYUNG\nBAMBU APUS\n2866\n2792\n27\n\n\n3174031002\nJAKARTA SELATAN\nMAMPANG PRAPATAN\nBANGKA\n1828\n1757\n26",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#funnelplotr-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#funnelplotr-methods",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 4 FunnelPlotR Methods",
    "text": "4-1: 4 FunnelPlotR Methods\nFunnelPlotR package uses ggplot to generate funnel plots. It requires numerator (events of interest), denominator (population considered) and group. The key arguments selected for customisation are:\n\nlimit: Plot limits (95 or 99)\nlabel_outliers: Label outliers (true or false)\nPoisson_limits: Add Poisson limits to the plot\nOD_adjust: Add overdispersed limits to the plot\nxrange and yrange: Specify the range to display for axes, acts like a zoom function\nOther aesthetic components, such as graph title, axis labels etc.\n\n\n4-1: 4.1 to 4.3 FunnelPlotR methods: Basic plot\nThe code below plots a funnel plots of increasing complexity.\n\n4.1 Basic Plot4-1: 4.2 Makeover 14-1: 4.3 Makeover 24-1: 5 Funnel Plot for Fair Visual Comparison: ggplot2 methods4-1: 6 References\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\n\ngroup: This function is different from its use in a scatterplot. Here, it defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\ndata_type: The default argument is “SR”.\nlimit: The accepted values for plot limits are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e., proportions).\nxrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nCode\n\n\n\n\n\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.\n\n\n\n\n\nIn this exercise, the funnel plots will be built step-by-step with ggplot2. This explains clearly how ggplot2 can be used to customise specialised data visualisation like the funnel Plot.\n\n4-1: 5.1 Computing the Basic Derived Fields\nTo plot the funnel plot from scratch, the following values were calculated:\n\nDerive cumulative death rate\nStandard error of cumulative death rate\n\n\n\nShow code\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, fit.mean was computed.\n\n\nShow Code\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\n\n4-1: 5.2 Calculate lower and upper limits for 95% and 99.9% CI\nLastly, the lower and upper limits for 95% confidence interval was derived.\n\n\nShow Code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe 1.96 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 95% confidence interval.\nThe 3.29 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 99.9% confidence interval.\n\n\n\n\n\n4-1: 5.3 Plotting a Static Funnel Plot\nA static funnel plot was created using ggplot2 functions.\n\n\nShow code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\n\n4-1: 5.4 Interactive funnel plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions above can be made interactive ggplotly() from plotly R package.\n\n\nShow code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly\n\n\n\n\n\n\n\n\n\n\nfunnelPlotR package.\nFunnel Plots for Indirectly-standardised ratios.\nChanging funnel plot options\nggplot2 package.",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#to-4.3-funnelplotr-methods-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#to-4.3-funnelplotr-methods-basic-plot",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 4.1 to 4.3 FunnelPlotR methods: Basic plot",
    "text": "4-1: 4.1 to 4.3 FunnelPlotR methods: Basic plot\nThe code below plots a funnel plots of increasing complexity.\n\n4.1 Basic Plot4-1: 4.2 Makeover 14-1: 4.3 Makeover 2\n\n\n\n\nShow code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 1 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\n\ngroup: This function is different from its use in a scatterplot. Here, it defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.\ndata_type: The default argument is “SR”.\nlimit: The accepted values for plot limits are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.\n\n\n\n\n\n\n\n\n\nThings to Improve\n\n\n\n\nThe scale is wrong, the data is very compressed.\nHowever, changing yrange results in missing 267 rows containing missing values or values outside the scale. Therefore, to adjust yrange, the data type should be changed to “PR”\n\n\n\n\n\n\n\nShow code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e., proportions).\nxrange and yrange are used to set the range of x-axis and y-axis.\n\n\n\n\n\n\n\n\n\nThings to Improve\n\n\n\n\nWhile the scale is fixed now, the chart title and axis titles are not appropriate.\nThe sub-district labels are distracting and do not provide more info into the chart.\n\n\n\n\n\n\n\nShow code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\n\nlabel = NA argument is to remove the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles.",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#makeover-1",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 4.2 Makeover 1",
    "text": "4-1: 4.2 Makeover 1\n\n\nShow code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05)\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\n\n\n\n\nThings to learn from the code\n\n\n\n\ndata_type argument is used to change from default “SR” to “PR” (i.e., proportions).\nxrange and yrange are used to set the range of x-axis and y-axis.",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#makeover-2",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 4.3 Makeover 2",
    "text": "4-1: 4.3 Makeover 2\n\n\nShow code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",\n  xrange = c(0, 6500),\n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by \\nCumulative Total Number of Postive Cases\",\n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\",\n  \n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion.",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#computing-the-basic-derived-fields",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 5.1 Computing the Basic Derived Fields",
    "text": "4-1: 5.1 Computing the Basic Derived Fields\nTo plot the funnel plot from scratch, the following values were calculated:\n\nDerive cumulative death rate\nStandard error of cumulative death rate\n\n\n\nShow code\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death/Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, fit.mean was computed.\n\n\nShow Code\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4-1: 5.2 Calculate lower and upper limits for 95% and 99.9% CI\nLastly, the lower and upper limits for 95% confidence interval was derived.\n\n\nShow Code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))\ndfCI &lt;- data.frame(number.ll95, number.ul95, \n                   number.ll999, number.ul999,\n                   number.seq, fit.mean)\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe 1.96 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 95% confidence interval.\nThe 3.29 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 99.9% confidence interval.",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#plotting-a-static-funnel-plot",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 5.3 Plotting a Static Funnel Plot",
    "text": "4-1: 5.3 Plotting a Static Funnel Plot\nA static funnel plot was created using ggplot2 functions.\n\n\nShow code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label = `Sub-district`),\n             alpha = 0.4) +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul95),\n            size = 0.4,\n            colour = \"skyblue\",\n            linetype = \"dashed\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ll999),\n            size = 0.4,\n            colour = \"skyblue\") +\n  geom_line(data = dfCI,\n            aes(x = number.seq,\n                y = number.ul999),\n            size = 0.4,\n            colour = 'skyblue') +\n  geom_hline(data = dfCI,\n             aes(yintercept = fit.mean),\n             size = 0.4,\n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0, 0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") +\n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85),\n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04-1/Hands-on_Ex04-1.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-On Exercise 4-1: Funnel Plots for Fair Comparisons",
    "section": "4-1: 5.4 Interactive funnel plot: plotly + ggplot2",
    "text": "4-1: 5.4 Interactive funnel plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions above can be made interactive ggplotly() from plotly R package.\n\n\nShow code\nfp_ggplotly &lt;- ggplotly(p,\n                        tooltip = c(\"label\",\n                                    \"x\",\n                                    \"y\"))\nfp_ggplotly",
    "crumbs": [
      "Hands-On Exercises",
      "4-1: Funnel Plots for Fair Comparisons"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-load-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-load-the-required-libraries",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 2.1 Install and Load the Required Libraries",
    "text": "1: 2.1 Install and Load the Required Libraries\nThe code chunk below uses p_load() of pacman package to check if tidyverse these packages are installed in the computer. If they are, then they will be launched into R.\nBefore starting, it is important to ensure that the required R packages have been installed. If they are installed, the R packages will be loaded. Otherwise, the the R packages will first be installed then loaded into the R environment.\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below assumes that pacman package is already installed. If not, install pacman first.\n\n\n\npacman::p_load(tidyverse, patchwork)\n\n\n\n\n\n\n\nNote\n\n\n\nPatchwork is used for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-On Exercise 2: Section 5.1",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 2.2 Importing the Data",
    "text": "1: 2.2 Importing the Data\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package since the file is in csv format. The readr part of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThe data:\n\nYear end examination grades of a cohort of primary 3 students from a local school.\nThere are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 3.1 R Graphics VS ggplot",
    "text": "1: 3.1 R Graphics VS ggplot\nComparing how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\n\n\n\n\n\n\n\n\nTip\n\n\n\nggplot2 gives much more functionalities on how to style the graph",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 4.1 A Layered Grammar of Graphics",
    "text": "1: 4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\n\n\n\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statistical transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.1 Geometric Objects: geom_bar()",
    "text": "1: 7.1 Geometric Objects: geom_bar()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat if I want to show the code only or the graph only?\n\n\n\n\n\n\n\nUse #| eval: false to show code without plotting graph\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\nUse #| echo: false to plot graph without showing code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\neval and echo is very useful in patchwork and panel-tabset",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.2 Geometric Objects: geom_dotplot()",
    "text": "1: 7.2 Geometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5) +\n  ggtitle(\"With y-axis\")\n\nd2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL) +\n  ggtitle(\"Without y-axis\")\n\nd1 + d2\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Hands-On Exercise 2: Section 5.1",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.3 Geometric Objects: geom_histogram()",
    "text": "1: 7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNote that the default bin is 30",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.4 Modifying a geometric object by changing geom()",
    "text": "1: 7.4 Modifying a geometric object by changing geom()\nIn the code chunk below:\n\nBins argument is used to change the number of bins to 20,\nFill argument is used to shade the histogram with light blue color, and\nColor argument is used to change the outline colour of the bars in black\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  +\n  ggtitle(\"Default\")\n\nh2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh1 + h2\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nAdjusting bin size fixes the gap and adding colour makes the plot more visually appealing",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.5 Modifying a geometric object by changing aes()",
    "text": "1: 7.5 Modifying a geometric object by changing aes()\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nh3 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  +\n  ggtitle(\"Modifying Bins and Colour\")\n\nh4 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")  +\n  ggtitle(\"Adding Subgroup\")\n\nh3 + h4\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nUsing sub-groups allows for bivariate analysis\nThis approach can be used to adjust colour, fill and alpha of the geometric elements",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.6 Geometric Objects: geom-density()",
    "text": "1: 7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nLeft Graph: Plots the distribution of Maths scores in a kernel density estimate plot\nRight Graph: Plots two kernel density lines by using colour or fill arguments of aes()\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nk1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() +\n  ggtitle(\"Default\")\n\nk2 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() +\n  ggtitle(\"Gender Sub-group\")\n\nk1 + k2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.7 Geometric Objects: geom_boxplot()",
    "text": "1: 7.7 Geometric Objects: geom_boxplot()\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nLeft Graph: Plots boxplots by using geom_boxplot().\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nRight Graph: Plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot() +\n  ggtitle(\"Default\")\n\nb2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE) +\n  ggtitle(\"Notched\")\n\nb1 + b2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.8 Geometric Objects: geom_violin",
    "text": "1: 7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it is easier to compare several distributions since they are placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geometric-objects-geom_point",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.9 Geometric Objects: Geometric Objects: geom_point()",
    "text": "1: 7.9 Geometric Objects: Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 7.10 geom objects can be combined",
    "text": "1: 7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 8.1 Working with stat()",
    "text": "1: 8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 8.2 Working with stat - the stat_summary() method",
    "text": "1: 8.2 Working with stat - the stat_summary() method\nThe left graph adds mean values by using stat_summary() function and overriding the default geom.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 8.3 Working with stat - the geom() method",
    "text": "1: 8.3 Working with stat - the geom() method\nThe right graph adds mean values by using geom_() function and overriding the default stat.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ns1 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4) +\n  ggtitle(\"stat_summary() method\")\n\ns2 &lt;- ggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4) +\n  ggtitle(\"geom_() method\")\n\ns1 + s2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieves the same result by adding a red marker to represent the mean.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 8.4 Adding a Best-Fit Curve on a Scatterplot?",
    "text": "1: 8.4 Adding a Best-Fit Curve on a Scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best-fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nLeft Graph: geom_smooth() is used to plot a best-fit curve on the scatterplot.\nRight Graph: The default smoothing method is overridden to show a linear best fit-line.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nf1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\nf2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\nf1 + f2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 9.1 Working with facet_wrap()",
    "text": "1: 9.1 Working with facet_wrap()\nfacet_wrap() wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid() because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 9.2 Working with facet_grid()",
    "text": "1: 9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nfacet_grid() is also ideal for displaying sequential variables like the performance of different classes. For the above example, facet_grid() is better than facet_wrap() since it allows easiy comparisons across all classes.",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 10.1 Working with Coordinate",
    "text": "1: 10.1 Working with Coordinate\n\nLeft Graph: By the default, the bar chart of ggplot2 is in vertical form\nRight Graph: coord_flip() flips the horizontal bar chart into vertical bar chart\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nb3 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  ggtitle(\"Default\")\n\nb4 &lt;- ggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  ggtitle(\"coord_flip()\")\n\nb3 + b4",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-On Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1: 10.1 Changing the y- and x-axis Range",
    "text": "1: 10.1 Changing the y- and x-axis Range\n\nLeft Graph: The default scatterplot is slightly misleading because the y-aixs and x-axis range are not equal.\nRight Graph: Fixed both the y-axis and x-axis range from 0-100.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr1 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +\n  ggtitle(\"Default\")\n\nr2 &lt;- ggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Equal y- and x-axis Range\")\n\nr1 + r2",
    "crumbs": [
      "Hands-On Exercises",
      "1: A Layered Grammar of Graphics: ggplot2 methods"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#install-and-load-the-required-libraries",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 2.1 Install and Load the Required Libraries",
    "text": "2: 2.1 Install and Load the Required Libraries\nIn this exercise, besides tidyverse (Explored in Hands-on Exercised 1), four R packages will be used. They are:\n\nggrepel: an R package providing geoms for ggplot2 to repel overlapping text labels\nggthemes: an R package providing some extra themes, geoms, and scales for ggplot2\nhrbrthemes: an R package providing typography-centric themes and theme components for ggplot2\npatchwork: an R package for preparing composite figure created using ggplot2\n\nCode chunk below will be used to check if these packages have been installed and also load them onto my working R environment.\n\npacman::p_load(ggrepel, patchwork,\n               ggthemes, hrbrthemes,\n               tidyverse,stringr)",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 2.2 Importing Data",
    "text": "2: 2.2 Importing Data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nCategorical Attributes: ID, CLASS, GENDER and RACE.\nContinuous Attributes: MATHS, ENGLISH and SCIENCE.",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 3.1 Working with ggrepel",
    "text": "2: 3.1 Working with ggrepel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nUsing the Repel code modifies the Default Plot such that only non-overlapping labels are shown and the Best-fit Curve is visible now as compared to being blocked by all the labels in the Default Plot.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code uses patchwork for easier comparisons between graphs. Further explanation on how to create it can be found in Section 2.5.1\n\n\n\nDefault CodeWith Repel Code\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5) +\n  geom_label(aes(label = ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"Default\")\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"With Repel\")",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-packages",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-packages",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 4.1 Working with ggtheme Packages",
    "text": "2: 4.1 Working with ggtheme Packages\nggthemes provides ggplot2 themes that replicate the look of plots by Edward Tuffe, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various themes.\n\nggtheme 1ggtheme 2ggtheme 3Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist() # Change this to different themes\n                    # ggtheme2 top right is theme_solid\n\n\n\n\nIt also provides some extra geoms and scales for ggplot2. Consult this vignette to learn more.",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbrthemes-package",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 4.2 Working with hrbrthemes Package",
    "text": "2: 4.2 Working with hrbrthemes Package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more.\nIn the example below, a plot of “Distribution of Maths Scores” was done using various settings.\n\nDefault theme vs Default theme_ipsum()Default theme_ipsum() vs Modified theme_ipsum()Code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins=20,\n                 boundary=100,\n                 color=\"grey25\",\n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_text_size = 18,\n              base_size = 15,\n              grid = \"Y\") # Default has no theme, and Default theme_ipsum has no extra parameters\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15\ngrid argument is used to remove the x-axis grid lines",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.1 Creating Composite Graphics: patchwork Methods",
    "text": "2: 5.1 Creating Composite Graphics: patchwork Methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. The ggplot2 extension extension called patchwork  is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax for creating layouts super easily. The general syntax is:\n\nTwo-Column Layout using the Plus sign “+”\nParenthesis “()” to create a subplot group\nTwo-Row Layout using the Division design “/”",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combing-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combing-two-ggplot2-graphs",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.2 Combing Two ggplot2 Graphs",
    "text": "2: 5.2 Combing Two ggplot2 Graphs\nThe figure in the tabset below shows a composite of two histograms created using patchwork. The code and syntax used to create the plot simple!\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.3 Combining Three ggplot2 Graphs",
    "text": "2: 5.3 Combining Three ggplot2 Graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs\n“|” operator to place the plots beside each other\n“()” operator to define the sequence of the plotting\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more, refer to Plot Assembly.",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tagging",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tagging",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.4 Creating a Composite Figure with Tagging",
    "text": "2: 5.4 Creating a Composite Figure with Tagging\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTake note that the tagging goes from top left -&gt; btm left -&gt; top right -&gt; btm right!",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insertion",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insertion",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.5 Creating Figure with Insertion",
    "text": "2: 5.5 Creating Figure with Insertion\nPatchwork allows more than just providing functions to place plots next to each other based on the provided layout. With inset_element(), one or several plots or graphic elements can be placed freely on top or below another plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2,\n                   left = 0.02,\n                   bottom = 0.7,\n                   right = 0.5,\n                   top = 1)",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-On Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2: 5.6 Creating a Composite Figure by Using patchwork and ggtheme",
    "text": "2: 5.6 Creating a Composite Figure by Using patchwork and ggtheme\nThe figure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npatchwork &lt;- (p1 / p2) | p3 \npatchwork & theme_economist()",
    "crumbs": [
      "Hands-On Exercises",
      "2: Beyond ggplot2 Fundamentals"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 4.1 Tooltip Effect with Tooltip Aesthetic",
    "text": "3-1: 4.1 Tooltip Effect with Tooltip Aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved.\nFirst, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 5.1 Displaying Multiple Information on Tooltip",
    "text": "3-1: 5.1 Displaying Multiple Information on Tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class =\", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks=NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#customising-tooltip-style",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.1 Customising Tooltip Style",
    "text": "3-1: 6.1 Customising Tooltip Style\nCode chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering by adding css declarations.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip_css &lt;- \"background-color: white;  #&lt;&lt;\nfront-style:bold; color: #ff0000;\" #&lt;&lt;\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe background colour of the tooltip is white and the font colour is red and bold\nRefer to Customizing girafe objects to learn more about how to customise ggriaph objects",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#displaying-statistics-on-tooltip",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.2 Displaying statistics on tooltip",
    "text": "3-1: 6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores: \", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data,\n                  aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax))),\n               fun.data = mean_se,\n               geom = GeomInteractiveCol,\n               fill = \"light blue\"\n              ) + \n              stat_summary(aes(y = MATHS),\n                fun.data = mean_se,\n                geom = \"errorbar\", width = 0.2, size = 0.2\n              )\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.3 Hover effect with data_id aesthetic",
    "text": "3-1: 6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#styling-hover-effect",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.4 Styling Hover Effect",
    "text": "3-1: 6.4 Styling Hover Effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id=CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill:#202020;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse hover\n\n\n\n\n\n\n\n\nNote\n\n\n\nDifferent from previous example, in this example the css customisation request are encoded directly",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#combining-tooltip-and-hover-effect",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.5 Combining Tooltip and Hover Effect",
    "text": "3-1: 6.5 Combining Tooltip and Hover Effect\nThere are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = CLASS, #tooltip here\n        data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #2020202;\"),\n    opts_hover_inv(css = \"opacity:0.2\")\n  )\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nElements associated with a data_id (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#click-effect-with-onclick",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.6 Click Effect with onclick",
    "text": "3-1: 6.6 Click Effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID)) #onclic link here\n\np &lt;- ggplot(data=exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL\n  )\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nWeb document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid JavaScript instructions.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 6.7 Coordinated Multiple Views with ggiraph",
    "text": "3-1: 6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\n\n\n\n\nNote\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID,),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  coord_cartesian(xlim = c(0,100)) + #patchwork here\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2),\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill:#202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n       ))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 7.1 Creating an Interactive Scatter Plot: plot_ly() Method",
    "text": "3-1: 7.1 Creating an Interactive Scatter Plot: plot_ly() Method\nThe tabset below shows an example of a basic interactive plot created by using plot_ly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(\n  data=exam_data,\n  x = ~MATHS,\n  y = ~ENGLISH\n)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe code using plot_ly() is simpler than ggplot2\nplot_ly() is interactive by default as compared to ggplot2 Hands-On Exercise 3-1: Section 1.5",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 7.2 Working with Visual Variable: plot_ly() Method",
    "text": "3-1: 7.2 Working with Visual Variable: plot_ly() Method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data=exam_data,\n        x = ~ENGLISH,\n        y = ~MATHS,\n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\nInteractive\n\n\n\nClick on the colour symbol at the legend",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 7.3 Creating an Interactive Scatter Plot: ggplotly() Method",
    "text": "3-1: 7.3 Creating an Interactive Scatter Plot: ggplotly() Method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNotice that the only extra line needed in the code chunk is ggplotly().\nThis is much simpler as compared to the ggplot2 tooltip method in Hands-On Exercise 3-1: Section 5.1",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 7.4 Coordinated Multiple Views with plotly",
    "text": "3-1: 7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\nTwo scatter plots will be created by using ggplot2 functions.\nLastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected. - But clicking on any data point results in a permanent selection, with no way to deselect it.\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight_key() simply creates object of class crosstalk::SharedData\nLearn more about crosswalk\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThis code is much simpler than the ggiraph method in Hands-On Exercise 3-1: Section 6.7,\nAnother difference is that the plotly highlight_key() method shows it’s corresponding point on click but the ggiraph method shows it’s corresponding point on hover",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#improving-coordinated-multiple-views-with-plotly",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 7.5 Improving Coordinated Multiple Views with plotly",
    "text": "3-1: 7.5 Improving Coordinated Multiple Views with plotly\nThere are a few issues with the coordinated multiple view plot above.\n\n\n\n\n\n\nHow to fix the annoying permanent selection issue?\n\n\n\nAdding selectize = FALSE allows for the user to do a double-click on any blank space to reset selection and shows all points again\n\n\n\n\n\n\n\n\nCan the selection method be on hover instead of on click?\n\n\n\n\nBy default, highlight_key() works on click, not hover but using plotly_hover allows it to mirror the ggiraph method in Hands-On Exercise 3-1: Section 6.7\n\n\n\n\n\n\n\n\n\nLastly, where are the axis labels?\n\n\n\n\nUse labs(), titleX and titleY to add axis labels\nUse margin so that the labels will not overlap the graph\n\n\n\nThe plot below implements the solutions to the questions above.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\n\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"ENGLISH\")\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS, y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +\n  labs(x = \"MATHS\", y = \"SCIENCE\")\n\nsubplot(\n  ggplotly(p1),\n  ggplotly(p2),\n  titleX = TRUE,\n  titleY = TRUE,\n  margin = 0.05) %&gt;%\n  highlight(on = \"plotly_hover\", selectize = FALSE)",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#interactive-data-table-dt-package",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 8.1 Interactive Data Table: DT Package",
    "text": "3-1: 8.1 Interactive Data Table: DT Package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nTableCode\n\n\n\n\n\n\n\n\n\n\n\nDT::datatable(exam_data, class = \"compact\")",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#linked-brushing-crosstalk-method",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 8.2 Linked Brushing: crosstalk Method",
    "text": "3-1: 8.2 Linked Brushing: crosstalk Method\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(d,\n            aes(ENGLISH,\n                MATHS)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)       \n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#ggiraph",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 9.1 ggiraph",
    "text": "3-1: 9.1 ggiraph\nThis link provides an online version of the reference guide and several useful articles. Use this link to download the PDF version of the reference guide.\n\nHow to plot with ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to create interactive graphs for Swiss Olympians - the solo specialists.",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03-1/Hands-on_Ex03-1.html#plotly-for-r",
    "title": "Hands-On Exercise 3-1: Programming Interactive Data Visualisation with R",
    "section": "3-1: 9.2 plotly for R",
    "text": "3-1: 9.2 plotly for R\n\nGetting started with Plotly in R\nA collection of plotly R graphs are available via this link\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nThis link provides a very interesting implementation of gganimate by an SMU senior.\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercises",
      "3-1: Programming Interactive Data Visualisation with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#basic-xoncepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#basic-xoncepts-of-animation",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot to convey motion, which is built using some relevant subset of the aggregated data.The subset drives the flow of the animation when stitched back together.",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#terminology",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "Before diving into the steps for creating an animated statistical graph, it is important to understand some of the key concepts and terminology related to this type of visualisation.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nDoes it make sense to go through the effort of making animated graphs?\n\n\n\nBefore making animated graphs, think of the above question first.\n\nAn animated graphic may not be worth the time investment for just exploratory data analysis.\nHowever, in a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts.",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#loading-the-r-packages",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 2.1 Loading the R packages",
    "text": "3-2: 2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly: An R library for plotting interactive statistical graphs\ngganimate: A ggplot extension for creating animated statistical graphs\ngifski: Converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colours per frame.\ngapminer: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme\ntidyverse: A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#importing-the-data",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 2.2 Importing the Data",
    "text": "3-2: 2.2 Importing the Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;% # mutate_each\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls of readxl package is used to import the Excel worksheet\nmutate_each_() of dplyr package is used to convert all character data type into factor\nmutate of dplyr package is used to convert data values of Year field into integer\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0 and funs() was deprecated in dplyr 0.8.0.\n\nIn view of this, we will re-write the code by using mutate_at()(link is different from notes) as shown in the code chunk below\nInstead of using mutate_at(), across() can be used to derive the same outputs\n\n\nUsing mutate_at()Using mutate(across())\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;% # mutate_at()\n  mutate(Year = as.integer(Year))\n\n\n\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet = \"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;% # mutate(across())\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBoth methods achieve the same results!",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-a-static-population-bubble-plot",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 3.1 Building a Static Population Bubble Plot",
    "text": "3-2: 3.1 Building a Static Population Bubble Plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young,\n                      size = Population,\n                      colour = Country)) +\n  geom_point(alpha = 0.7,\n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2,12)) +\n  labs(title = 'Year: {frame_time}',\n       x = '% Aged',\n       y = '% Young')",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-the-animated-bubble-plot",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 3.2 Building the Animated Bubble Plot",
    "text": "3-2: 3.2 Building the Animated Bubble Plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year)\nease_aes() is used to control easing of aesthetics. The default is linear.\n\nOther methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 4.1 Building an Animated Bubble Plot: ggplotly() Method",
    "text": "3-2: 4.1 Building an Animated Bubble Plot: ggplotly() Method\nIn this sub-section, an animated bubble plot will be created by using the ggplotly() method.\n\nNew Plot (without legend)CodeOriginal Plot (with legend)\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 4.2 Building an Animated Bubble Plot: plot_ly() Method",
    "text": "3-2: 4.2 Building an Animated Bubble Plot: plot_ly() Method\nIn this sub-section, an animated bubble plot will be created with the plot_ly() method.\n\nplot_ly() Plotplot_ly() Codeggplotly() Code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(2,100),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe plot_ly() method is much simpler and easier to read and code compared to the ggplotly() method due to its simpler syntax and fewer layers of customisation.\n\nThe execution time needed for plot_ly() is also lower.",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#improving-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03-2/Hands-on_Ex03-2.html#improving-animated-bubble-plot-plot_ly-method",
    "title": "Hands-On Exercise 3-2: Programming Animated Statistical Graphics with R",
    "section": "3-2: 4.3 Improving Animated Bubble Plot: plot_ly() Method",
    "text": "3-2: 4.3 Improving Animated Bubble Plot: plot_ly() Method\nChanges implemented: - Bubble size - Added legend\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old,\n          y = ~ Young,\n          size = ~Population,\n          color = ~Continent,\n          sizes = c(10,600),\n          frame = ~Year,\n          text = ~Country,\n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n\n\n3-2: 5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by an SMU senior\nBuilding an animation step-by-step with gganimate\nCreating a composite gif with multiple gganimate panels",
    "crumbs": [
      "Hands-On Exercises",
      "3-2: Programming Animated Statistical Graphics with R"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. The popular statistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2 can be found in Hands-On Exercise 1. In this exercise will focus on two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions.",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#installing-and-loading-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#installing-and-loading-packages",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 2.1 Installing and Loading Packages",
    "text": "4-2: 2.1 Installing and Loading Packages\nThe following R packages will be used for this exercise:\n\nggridges: A ggplot2 extension specially designed for plotting ridgeline plots\nggdist: A ggplot2 extension specially designed for visualising distribution and uncertainty\ntidyverse: A family of R packages to meet the modern data science and visual communication needs\nggthemes: A ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\ncolorspace: An R package providing a broad toolbox for selecting individual colours or colour palettes, manipulating these colours, and employing them in various kinds of visualisations.\npatchwork: an R package for preparing composite figure created using ggplot2\n\nThe code chunk below will be used to load these R packages into the RStudio environment.\n\n\nShow Code\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, patchwork)",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#data-import",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 2.2 Data Import",
    "text": "4-2: 2.2 Data Import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\n\nShow code\nexam &lt;- read_csv(\"data/Exam_data.csv\")",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.1 Plotting ridgeline Graph: ggridges Method",
    "text": "4-2: 3.1 Plotting ridgeline Graph: ggridges Method\nThere are several ways to plot ridgeline plots with R. In this section, the ggridges package will be used to plot ridgeline plots.\nggridges package provides two main geom to plot ridgeline plots. They are: grom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#verying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#verying-fill-colors-along-the-x-axis",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.2 Verying fill colors along the x axis",
    "text": "4-2: 3.2 Verying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colours. However, they do not allow for alpha transparency in the fill. For technical reasons, it can either be changing fill colours or transparency but not both.\n\n\n\n\n\n\nNote\n\n\n\nThe available colours are “A” to “H”.\n\n\n\nPlasmaOthers 1Others 2\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") + # Available options are A to H\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges() +\n  ggtitle('Plasma')",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#mapping-the-probabilities-directly-onto-color",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#mapping-the-probabilities-directly-onto-color",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.3 Mapping the probabilities directly onto color",
    "text": "4-2: 3.3 Mapping the probabilities directly onto color\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nPracticeExample plot\n\n\nUsed scale_fill_viridis_b to replace scale_fill_viridis_c, and changed theme colour.\n❓ Need discrete data to use scale_fill_viridis_d ? &gt; see next example!\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       option = \"B\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIt is important to include the argument calc_ecdf = TRUE in stat_density_ridges().",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.4 Ridgeline Plots with Quantile Lines",
    "text": "4-2: 3.4 Ridgeline Plots with Quantile Lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the first figure below.\nOr, instead of using number to define the quantiles, we can also specify quantiles by cutting points such as 2.5% and 97.5% tails to colour the ridgeline plot, shown in the second figure below.\n\n4 QuantilesManual Quantiles\n\n\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow Code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#adding-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#adding-boxplot-with-geom_boxplot",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 4.2 Adding Boxplot with geom_boxplot()",
    "text": "4-2: 4.2 Adding Boxplot with geom_boxplot()\nNext, the second geometry layer will be added using geom_boxplot() of ggplot2. This produces a narrow boxplot. The width will be reduced and the opacity will be adjusted.\n\n\n\n\n\n\nNote\n\n\n\nBut it seems that opacity of boxplot cannot be adjusted using alpha.\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA)",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#adding-dot-plot-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#adding-dot-plot-with-stat_dots",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 4.3 Adding Dot plot with stat_dots",
    "text": "4-2: 4.3 Adding Dot plot with stat_dots\nNext, the third geometry layer will be added using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#finishing-touch",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 4.4 Finishing Touch",
    "text": "4-2: 4.4 Finishing Touch\nLastly, coord_flit() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nPlotImproved Plot\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe bin width is an important variable and resulted in the first graph having points clipped out due to coord_flip(). This can be left empty to let the graph decide automatically.",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plasma",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plasma",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "Plasma",
    "text": "Plasma\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") + # Available options are A to H\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges() +\n  ggtitle('Plasma')",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#others-1",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#others-1",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "Others 1",
    "text": "Others 1",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#others-2",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#others-2",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "Others 2",
    "text": "Others 2",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.3 Mapping the Probabilities Directly onto Colour",
    "text": "4-2: 3.3 Mapping the Probabilities Directly onto Colour\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nscale_fill_viridis_bscale_fill_viridis_c\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nscale_fill_viridis_b / c controls how granular the colours are mixed\nscale_fill_viridis_d is for discrete variables",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#plotting-a-half-eye-graph",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 4.1 Plotting a Half Eye Graph",
    "text": "4-2: 4.1 Plotting a Half Eye Graph\nFirst, a Half-Eye graph will be plotted by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which contains a half-density and a slab-interval.\n\nPlot (without slab interval)Plot (with slab interval)\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\nThe slab interval was removed by setting .width = 0 and point_colour = NA.",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#example-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#example-plot",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "Example Plot",
    "text": "Example Plot\n\n\nShow the code\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to Learn\n\n\n\nThe slab interval was removed by setting .width = 0 and point_colour = NA.",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#varying-fill-colours-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04-2/Hands-on_Ex04-2.html#varying-fill-colours-along-the-x-axis",
    "title": "Hands-On Exercise 4-2: Visualising Distribution",
    "section": "4-2: 3.2 Varying Fill Colours Along the X-Axis",
    "text": "4-2: 3.2 Varying Fill Colours Along the X-Axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient().\nBoth geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colours. However, they do not allow for alpha transparency in the fill. For technical reasons, it can either be changing fill colours or transparency but not both.\n\n\n\n\n\n\nNote\n\n\n\nThe available colours are “A” to “H”.\n\n\n\nPlasmaOthers 1Others 2\n\n\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") + # Available options are A to H\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges() +\n  ggtitle('Plasma')",
    "crumbs": [
      "Hands-On Exercises",
      "4-2: Visualising Distribution"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "",
    "text": "In this hands-on exercise, the following will be covered:\n\nggstatsplot Package: Create visual graphics with rich statistical information\nperformance Package: Visualise model diagnostics\nparameters Package: Visualise model parameters",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#installing-and-launching-r-packages",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.1 Installing and Launching R Packages",
    "text": "4-3: 3.1 Installing and Launching R Packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\nShow code\npacman::p_load(ggstatsplot, tidyverse)",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#importing-data",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.2 Importing Data",
    "text": "4-3: 3.2 Importing Data\nImporting Exam-csv data by using read_csv().\n\n\nShow code\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\nlibrary(knitr)\nkable(head(exam, 10))\n\n\n\n\n\nID\nCLASS\nGENDER\nRACE\nENGLISH\nMATHS\nSCIENCE\n\n\n\n\nStudent321\n3I\nMale\nMalay\n21\n9\n15\n\n\nStudent305\n3I\nFemale\nMalay\n24\n22\n16\n\n\nStudent289\n3H\nMale\nChinese\n26\n16\n16\n\n\nStudent227\n3F\nMale\nChinese\n27\n77\n31\n\n\nStudent318\n3I\nMale\nMalay\n27\n11\n25\n\n\nStudent306\n3I\nFemale\nMalay\n31\n16\n16\n\n\nStudent313\n3I\nMale\nChinese\n31\n21\n25\n\n\nStudent316\n3I\nMale\nMalay\n31\n18\n27\n\n\nStudent312\n3I\nMale\nMalay\n33\n19\n15\n\n\nStudent297\n3H\nMale\nIndian\n34\n49\n37",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#one-sample-test-gghistostats-method",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.3 One-Sample Test: gghistostats() Method",
    "text": "4-3: 3.3 One-Sample Test: gghistostats() Method\nIn the code chunk below, gghistostats() is used to build an visual of one-sample test on English scores.\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault Information\n\n\n\n\nStatistical Details\nBayes Factor\nSample Sizes\nDistribution Summary",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#unpacking-the-bayes-factor",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.4 Unpacking the Bayes Factor",
    "text": "4-3: 3.4 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favour of one theory among two competing theories.\nThat is because the Bayes factor gives us a way to evaluate the data in favour of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favour of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes factor is often written as B10. It can be defined mathematically as:\n\n\n\n\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough estimation of the Bayes factor.",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#how-to-interpret-bayes-factor",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.5 How to Interpret Bayes Factor",
    "text": "4-3: 3.5 How to Interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretation is this: First proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagemakers in 2013.",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.6 Two-Sample Mean Test: ggbetweenstats()",
    "text": "4-3: 3.6 Two-Sample Mean Test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER,\n  y = MATHS,\n  type = \"np\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefault Information\n\n\n\n\nStatistical Details\nBayes Factor\nSample Sizes\nDistribution Summary",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#oneway-anova-test-ggbetweentats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#oneway-anova-test-ggbetweentats-method",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.7 Oneway ANOVA Test: ggbetweentats() Method",
    "text": "4-3: 3.7 Oneway ANOVA Test: ggbetweentats() Method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English scores by Race.\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE,\n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE,\n  pariwise.comparisons = TRUE,\n  pairwise.display = \"s\",\n  p.adjust.methods = \"fdr\",\n  message = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\n\n\n“na” → only non-significant\n“s” → only significant\n“all” → everything\n\n\n\n\n4-3: 3.7.1 ggbetweentats() - Summary of Tests",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.8 Significant Test of Correlation: ggscatterstats()",
    "text": "4-3: 3.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE\n)",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#significant-test-of-association-dependence-ggbarstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04-3/Hands-on_Ex04-3.html#significant-test-of-association-dependence-ggbarstats-method",
    "title": "Hands-On Exercise 4-2: Visual Statistical Analysis",
    "section": "4-3: 3.9 Significant Test of Association (Dependence): ggbarstats() Method",
    "text": "4-3: 3.9 Significant Test of Association (Dependence): ggbarstats() Method\nIn the code chunk below, the Maths scores are binned into a 4-class variable width by using cut()\n\n\nShow the code\nexam1 &lt;- exam %&gt;%\n  mutate(MATHS_bins = \n           cut(MATHS,\n               breaks = c(0,60,75,85,100)))\n\n\nAnd the code chunt below uses ggbarstats() to build a visual for Significant Test of Association.\n\n\nShow the code\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Hands-On Exercises",
      "4-3: Visual Statistical Analysis"
    ]
  }
]