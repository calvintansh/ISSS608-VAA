---
title: "Hands-on Exercise 1"
author: "Calvin Tan"
---

# Getting Started

## Install and Launch R Packages

The code chunk below uses p_load() of pacman package to check if tidyverse these packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(patchwork, tidyverse)
```

## Importing the Data

For the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Plotting Simple Graphs

## A blank graph

```{r}
ggplot(data=exam_data)
```

## Purpose of aes() function

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

All aesthetics of a plot are specified in the aes() function call and the code above adds MATHS to the x-axis.

## Plotting a Bar Chart

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

### What if I want to show the code only or the graph only?

#### Use #\| eval: false to show code without plotting graph

```{r}
#| eval: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

#### Use #\| echo: false to plot graph without showing code

```{r}
#| echo: false
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

## Plotting a Dot Graph

### With y-axis vs without y-axis

```{r}
d1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)

d2 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)

d1 + d2
```

The y scale is not very useful, in fact it is very misleading.

## Plotting a Histogram

### Default vs Modifying Bins and Colour

```{r}
h1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()  

h2 <- ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue") 

h1 + h2
```

Adjusting bin size fixes the gap and adding colour makes the plot more visually appealing.

### Adding Gender Sub-group

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

Using sub-groups allows for bivariate analysis.

## Plotting a Kernel Density Estimate

### Default vs Gender Sub-group

```{r}
k1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density() 

k2 <- ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()

k1 + k2
```

## Plotting a Box Plot

### Default vs Notched

```{r}
b1 <- ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()

b2 <- ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)

b1 + b2
```

Notches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

## Plotting a Violin Plot

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

## Plotting a Scatterplot

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()  
```

# Plotting More Complex Plots

## Plotting a Combined Boxplot and Scatterplot

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5) 
```

## Adding Statistical Functions to Plots

### Default

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

The boxplots below are incomplete because the positions of the means were not shown.

### Using the stat_summary() method vs Using the geom() method

```{r}
s1 <- ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun = "mean",         
               colour ="red",        
               size=4)

s2 <- ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour="red",          
             size=4)

s1 + s2
```

Both methods achieves the same result by adding a red marker to represent the mean.

## Adding a Best-fit to a Scatterplot

### Default

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point()
```

### Best-fit Curve vs Best-fit Line

```{r}
f1 <- ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(linewidth=0.5)

f2 <- ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5)

f1 + f2
```

## Generating Trellis Plots

### Using facet_wrap()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

facet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

### Using facet_grid()

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

facet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

It is also ideal for displaying sequential variables like the performance of different classes so facet_grid() is better than facet_wrap() for this case.

# Using Coordinates

## Vertical vs Horizontal Bar Chart

```{r}
b3 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()

b4 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()

b3 + b4
```

## Changing the y- and x-axis Range

### Default vs Equal y- and x-axis Range

```{r}
r1 <- ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)

r2 <- ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

r1 + r2
```

The default scatterplot on the left is slightly misleading because the y-aixs and x-axis range are not equal. The scatterplot on the right fixes both the y-axis and x-axis range to be from 0-100.

# Using Themes

Themes can make the plots more visually appealing. The available themes are: theme_grey() theme_gray() theme_bw() theme_linedraw() theme_light() theme_dark() theme_minimal() theme_classic() theme_void() theme_test()

## Default (I) vs Gray (II) vs Grey (III) Theme

```{r}
t1 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()

t2 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()

t3 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_grey()

(t1 | (t2 / t3)) +
  plot_annotation(tag_levels = 'I')
```

They are all the same theme! The default is theme_gray() and theme_grey() is an alias to theme_gray().

## Other Themes

### Classic (I) vs Minimal (II) vs BW (III) vs Linedraw (IV)

```{r}
t4 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()

t5 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()

t6 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_bw()

t7 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_linedraw()

((t4 / t5) | (t6 / t7)) +
  plot_annotation(tag_levels = 'I')
```

### Light (I) vs Dark (II) vs Void (III) vs Test (IV)

```{r}
t8 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_light()

t9 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_dark()

t10 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_void()

t11 <- ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_test()

((t8 / t9) | (t10 / t11)) +
  plot_annotation(tag_levels = 'I')
```
