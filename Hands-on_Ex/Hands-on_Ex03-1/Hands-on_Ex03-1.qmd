---
title: "[Hands-on Exercise 3-1:]{style='color:DarkOrange'} Programming Interactive Data Visualisation with R"
date: 2025-04-25
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## [3-1.1]{style="color:DarkOrange"} Learning Outcome

In this hands-on exercise, you will learn how to create interactive data visualisation by using functions provided by **ggiraph** and **plotlyr** packages.

## [3-1.2]{style="color:DarkOrange"} Getting Started

First, write a code chunk to check, install and launch the following R packages:

-   [**ggiraph**](https://davidgohel.github.io/ggiraph/): For making 'ggplot' graphics interactive
-   [**plotly**](https://plotly.com/r/): An R library for plotting interactive statistical graphs
-   [**DT**](https://rstudio.github.io/DT/): Provides an R interface to the JavaScript library [DataTables](https://datatables.net/) that create interactive table on html page
-   [**tidyverse**](https://www.tidyverse.org/): A family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.
-   [**patchwork**](https://patchwork.data-imaginist.com/): For combining multiple ggplot2 graphs into one figure.

The code chunk below will be used to accomplish the task.

```{r}
pacman::p_load(ggiraph, plotly,
               patchwork, DT, tidyverse)
```

## [3-1.3]{style="color:DarkOrange"} Importing Data

In this section, *Exam_data.csv* provided will be used. Using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package, import *Exam_data.csv* into R.

The code chunk below `read_csv()` of **readr** package is used to import *Exam_data.csv* data file into R and save it as an tibble data frame called `exam_data`.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

## [3-1.4]{style="color:DarkOrange"} Interactive Data Visualisation - ggiraph Methods

[ggiraph](https://davidgohel.github.io/ggiraph/) ![](/Hands-on_Ex/Hands-on_Ex03-1/image/ggraph.jpg){width="60"} is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.

Interactive is made with [ggplot geometries](https://davidgohel.github.io/ggiraph/reference/index.html#section-interactive-geometries) that can understand three arguments:

-   **Tooltip**: A column of data-sets that contain tooltips to be displayed when the mouse is over elements
-   **Onclick**: A column of data-sets that contain a JavaScript function to be executed when elements are clicked
-   **Data_id**: A column of data-sets that contain an id to be associated with elements

If it is used within a shiny application, elements associated with an id(data_id) can be selected and manipulated on client and server sides. Refer to this [article](https://www.ardata.fr/ggiraph-book/selections.html) for more detail explanation.

### [3-1.4.1]{style="color:DarkOrange"} Tooltip Effect with *Tooltip* Aesthetic

Below shows a typical code chunk to plot an interactive statistical graph by using **ggiraph** package. Notice that the code chunk consists of two parts. First, a ggplot object will be created. Next, [`girafe()`](https://davidgohel.github.io/ggiraph/reference/girafe.html) of **ggiraph** will be used to create an interactive svg object.

```{r}
#| eval: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

Notice that two steps are involved.

First, an interactive version of ggplot2 geom (i.e. [geom_dotplot_interactive()](https://davidgohel.github.io/ggiraph/reference/geom_dotplot_interactive.html)) will be used to create the basic graph. Then, [girafe()](https://davidgohel.github.io/ggiraph/reference/girafe.html) will be used to generate an svg object to be displayed on an html page.

## [3-1.5]{style="color:DarkOrange"} Interactivity

By hovering the mouse pointer on an data point of interest, the student's ID will be displayed.

```{r}
#| echo: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### [3-1.5.1]{style="color:DarkOrange"} Displaying Multiple Information on Tooltip

The content of the tooltip can be customised by including a list object as shown in the code chunk below.

```{r}
#| eval: false
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class =", exam_data$CLASS))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks=NULL)

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)

```

The first three lines of codes in the code chunk create a new field called *tooltip*. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.

## [3-1.6]{style="color:DarkOrange"} Interactivity

::: callout-note
By hovering the mouse pointer on a data point of interest, the student's ID and CLASS are displayed.
:::

```{r}
#| echo: false
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class =", exam_data$CLASS))

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks=NULL)

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)

```

### [3-1.6.1]{style="color:DarkOrange"} Customising Tooltip Style

Code chunk below uses [`opts_tooltip()`](https://davidgohel.github.io/ggiraph/reference/opts_tooltip.html) of **ggiraph** to customise tooltip rendering by adding css declarations.

::: panel-tabset
## Plot

```{r}
#| echo: false
tooltip_css <- "background-color: white;  #<<
front-style:bold; color: #ff0000;" #<<

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)
```

## Code

```{r}
#| eval: false
tooltip_css <- "background-color: white;  #<<
front-style:bold; color: #ff0000;" #<<

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)
```
:::

::: callout-note
-   The background colour of the tooltip is **white** and the font colour is red and bold
-   Refer to [Customizing girafe objects](https://www.ardata.fr/ggiraph-book/customize.html) to learn more about how to customise ggriaph objects
:::

### [3.6.2]{style="color:DarkOrange"} Displaying statistics on tooltip

Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

::: panel-tabset
## Plot

```{r}
#| echo: false
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores: ", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data,
                  aes(x = RACE),
) +
  stat_summary(aes(y = MATHS,
                   tooltip = after_stat(
                     tooltip(y, ymax))),
               fun.data = mean_se,
               geom = GeomInteractiveCol,
               fill = "light blue"
              ) + 
              stat_summary(aes(y = MATHS),
                fun.data = mean_se,
                geom = "errorbar", width = 0.2, size = 0.2
              )
girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```

## Code

```{r}
#| eval: false
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores: ", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data,
                  aes(x = RACE),
) +
  stat_summary(aes(y = MATHS,
                   tooltip = after_stat(
                     tooltip(y, ymax))),
               fun.data = mean_se,
               geom = GeomInteractiveCol,
               fill = "light blue"
              ) + 
              stat_summary(aes(y = MATHS),
                fun.data = mean_se,
                geom = "errorbar", width = 0.2, size = 0.2
              )
girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```
:::

### [3-1.6.3]{style="color:DarkOrange"} Hover effect with *data_id* aesthetic

Code chunk below shows the second interactive feature of ggiraph, namely `data_id`.

::: panel-tabset
## Plot

```{r}
#| echo: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## Code

```{r}
#| eval: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
:::

::: callout-note
## Interactive

Elements associated with a *data_id* (i.e. CLASS) will be highlighted upon mouse over.
:::

::: callout-note
Note that the default value of the hover css is *hover_css = "fill:orange;"*.
:::

### [3-1.6.4]{style="color:DarkOrange"} Styling Hover Effect

In the code chunk below, css codes are used to change the highlighting effect.

::: panel-tabset
## Plot

```{r}
#| echo: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id=CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill:#202020;"),
    opts_hover_inv(css = "opacity:0.2;")
  )
)
```

## Code

```{r}
#| eval: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id=CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill:#202020;"),
    opts_hover_inv(css = "opacity:0.2;")
  )
)
```
:::

::: callout-note
## Interactive

Elements associated with a *data_id (i.e. CLASS)* will be highlighted upon mouse hover
:::

::: callout-note
Different from previous example, in this example the css customisation request are encoded directly
:::

### [3-1.6.5]{style="color:DarkOrange"} Combining Tooltip and Hover Effect

There are times when we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.

::: panel-tabset
## Plot

```{r}
#| echo: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = CLASS, #tooltip here
        data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #2020202;"),
    opts_hover_inv(css = "opacity:0.2")
  )
)
```

## Code

```{r}
#| eval: false
p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = CLASS, #tooltip here
        data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #2020202;"),
    opts_hover_inv(css = "opacity:0.2")
  )
)
```
:::

::: callout-note
## Interactive

Elements associated with a *data_id* (i.e. CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.
:::

### [3-1.6.6]{style="color:DarkOrange"} Click Effect with onclick

`onclick` argument of ggiraph provides hotlink interactivity on the web.

The code chunk below shown an example of `onclick`.

::: panel-tabset
## Plot

```{r}
#| echo: false
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID)) #onclic link here

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(onclick = onclick),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

## Code

```{r}
#| eval: false
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID)) #onclic link here

p <- ggplot(data=exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(onclick = onclick),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,
                     breaks = NULL
  )
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```
:::

::: callout-note
## Interactive
Web document link with a data object will be displayed on the web browser upon mouse click.
:::

::: callout-warning
Note that click actions must be a string column in the dataset containing valid JavaScript instructions.
:::

### [3-1.6.7]{style="color:DarkOrange"} Coordinated Multiple Views with ggiraph

Coordinated multiple views methods has been implemented in the data visualisation below.

In order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package will be used inside girafe function to create the interactive coordinated multiple views.

::: callout-note
When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.
:::

::: panel-tabset
## Plot

```{r}
#| echo: false
p1 <- ggplot(data=exam_data,
             aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = ID,),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data=exam_data,
             aes(x = ENGLISH)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim = c(0,100)) + #patchwork here
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(code = print(p1 + p2),
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill:#202020;"),
         opts_hover_inv(css = "opacity:0.2;")
       ))

```

## Code

```{r}
#| eval: false
p1 <- ggplot(data=exam_data,
             aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = ID,),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data=exam_data,
             aes(x = ENGLISH)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  coord_cartesian(xlim = c(0,100)) + #patchwork here
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(code = print(p1 + p2),
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill:#202020;"),
         opts_hover_inv(css = "opacity:0.2;")
       ))
```
:::

::: callout-note
The *data_id* aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.
:::

## [3-1.7]{style="color:DarkOrange"} Interactive Data Visualisation - plotly Method

Plotly's R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [plotly.js](https://plotly.com/javascript/) inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.

![](/Hands-on_Ex/Hands-on_Ex03-1/image/image1.jpg){fig-align="center" width="800"}

There are two ways to create interactive graph by using plotly, they are:

-   by using *plot_ly()*, and
-   by using *ggplotly()*

### [3-1.7.1]{style="color:DarkOrange"} Creating an Interactive Scatter Plot: plot_ly() Method

The tabset below shows an example of a basic interactive plot created by using *plot_ly()*.

::: panel-tabset
## Plot

```{r}
#| echo: false
plot_ly(
  data=exam_data,
  x = ~MATHS,
  y = ~ENGLISH) 

```

## Code

```{r}
#| eval: false
plot_ly(
  data=exam_data,
  x = ~MATHS,
  y = ~ENGLISH
)
```
:::

::: callout-tip
-   The code using plot_ly() is simpler than ggplot2
-   plot_ly() is interactive by default as compared to ggplot2 [Hands-On Exercise 3-1: Section 3-1.5](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#interactivity)
:::

### [3.7.2]{style="color:DarkOrange"} Working with Visual Variable: `plot_ly()` Method

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE).

::: panel-tabset
## Plot

```{r}
#| echo: false
plot_ly(data=exam_data,
        x = ~ENGLISH,
        y = ~MATHS,
        color = ~RACE)
```

## Code

```{r}
#| eval: false
plot_ly(data=exam_data,
        x = ~ENGLISH,
        y = ~MATHS,
        color = ~RACE)
```
:::

::: callout-note
## Interactive

Click on the colour symbol at the legend
:::

### [3-1.7.3]{style="color:DarkOrange"} Creating an Interactive Scatter Plot: `ggplotly()` Method

The code chunk below plots an interactive scatter plot by using *`ggplotly()`*.

::: panel-tabset
## Plot

```{r}
#| echo: false
p <- ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
ggplotly(p)

```

## Code

```{r}
#| eval: false
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```
:::

::: callout-note
-   Notice that the only extra line needed in the code chunk is *ggplotly()*.
-   This is much simpler as compared to the ggplot2 tooltip method in [Hands-On Exercise 3-1: Section 3-1.5.1](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#displaying_multiple_information_on_tooltip)
:::

### [3-1.7.4]{style="color:DarkOrange"} Coordinated Multiple Views with plotly

The creation of a coordinated linked plot by using plotly involves three steps:

1.  [`highlight_key()`](https://www.rdocumentation.org/packages/plotly/versions/4.9.2/topics/highlight_key) of **plotly** package is used as shared data.
2.  Two scatter plots will be created by using ggplot2 functions.
3.  Lastly, [`subplot()`](https://plotly.com/r/subplots/) of **plotly** package is used to place them next to each other side-by-side.

::: panel-tabset
## Plot

```{r}
#| echo: false
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```

## Code

```{r}
#| eval: false
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```
:::

::: callout-note
Click on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.
- But clicking on any data point results in a permanent selection, with no way to deselect it.
:::

::: callout-note
## Things to learn from the code chunk above

-   `highlight_key()` simply creates object of class [crosstalk::SharedData](https://rdrr.io/cran/crosstalk/man/SharedData.html)
-   Learn more about [crosswalk](https://rstudio.github.io/crosstalk/)
:::

::: callout-note
- This code is much simpler than the ggiraph method in [Hands-On Exercise 3-1: Section 3-1.6.7](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#coordinated-multiple-views-with-ggiraph),
- Another difference is that the plotly highlight_key() method shows it's corresponding point **on click** but the ggiraph method shows it's corresponding point **on hover**
:::

### [3-1.7.5]{style="color:DarkOrange"} Improving Coordinated Multiple Views with plotly

There are a few issues with the coordinated multiple view plot [above](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#coordinated_multiple_views_with_plotly).

::: callout-tip
## How to fix the annoying permanent selection issue?
Adding selectize = FALSE allows for the user to do a double-click on any blank space to reset selection and shows all points again
:::

::: callout-tip
## Can the selection method be *on hover* instead of *on click*?

- By default, highlight_key() works on click, not hover but using plotly_hover allows it to mirror the ggiraph method in [Hands-On Exercise 3-1: Section 3-1.6.7](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#coordinated-multiple-views-with-ggiraph)
:::

::: callout-tip    
## Lastly, where are the axis labels?
-   Use labs(), titleX and titleY to add axis labels
-   Use margin so that the labels will not overlap the graph
:::

The plot below implements the solutions to the questions above.

::: panel-tabset
## Plot

```{r}
#| echo: false
d <- highlight_key(exam_data)

p1 <- ggplot(data=d, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +
  labs(x = "MATHS", y = "ENGLISH")

p2 <- ggplot(data=d, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +
  labs(x = "MATHS", y = "SCIENCE")

subplot(
  ggplotly(p1),
  ggplotly(p2),
  titleX = TRUE,
  titleY = TRUE,
  margin = 0.05) %>%
  highlight(on = "plotly_hover", selectize = FALSE)
```

## Code

```{r}
#| eval: false
d <- highlight_key(exam_data)

p1 <- ggplot(data=d, 
            aes(x = MATHS, y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +
  labs(x = "MATHS", y = "ENGLISH")

p2 <- ggplot(data=d, 
            aes(x = MATHS, y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100), ylim=c(0,100)) +
  labs(x = "MATHS", y = "SCIENCE")

subplot(
  ggplotly(p1),
  ggplotly(p2),
  titleX = TRUE,
  titleY = TRUE,
  margin = 0.05) %>%
  highlight(on = "plotly_hover", selectize = FALSE)
```
:::

## [3-1.8]{style="color:DarkOrange"} Interactive Data Visualisation - crosstalk Method

[crosstalk](https://rstudio.github.io/crosstalk/) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

### [3-1.8.1]{style="color:DarkOrange"} Interactive Data Table: DT Package

-   A wrapper of the JavaScript Library [DataTables](https://datatables.net/)
-   Data objects in R can be rendered as HTML tables using the JavaScript library 'DataTables' (typically via R Markdown or Shiny).

::: panel-tabset
## Table

```{r}
#| echo: false
DT::datatable(exam_data, 
              class = "compact",
              options = list(
                pageLength = 5)
)
```

## Code

```{r}
#| eval: false
DT::datatable(exam_data, class = "compact")
```
:::

### [3-1.8.2]{style="color:DarkOrange"} Linked Brushing: crosstalk Method

::: panel-tabset
## Plot

```{r}
#| echo: false
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```

## Code

```{r}
#| eval: false
d <- highlight_key(exam_data)
p <- ggplot(d,
            aes(ENGLISH,
                MATHS)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

gg <- highlight(ggplotly(p),
                "plotly_selected")

crosstalk::bscols(gg,
                  DT::datatable(d),
                  widths = 5)       
```
:::

::: callout-note
## Things to learn from the code chunk above

-   *highlight()* is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.
-   *bscols()* is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning**: This will bring in all of Bootstrap!.
:::

## [3-1.8.3]{style="color:DarkOrange"} Improving DataTable

The DataTables above have 2 extra columns (tooltip and onclick). This is because they were added in [Hands-On Exercise 3-1: Section 3-1.5.1](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#displaying_multiple_information_on_tooltip) for tooltip and in [Hands-On Exercise 3-1: Section 3-1.6.6](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#click_effect_with_onclick) for onclick.

A new dataset will be read to view how the DataTable should look like without the additional columns.

```{r}
exam_data_2 <- read_csv("data/Exam_data.csv")
```

::: callout-note
pageLength is used to set the default number of entries to 5 for a more compact table
:::

::: panel-tabset
## Plot

```{r}
#| echo: false
DT::datatable(exam_data_2, 
              class = "compact",
              options = list(
                pageLength = 5)
)
```

## Code

```{r}
#| eval: false
DT::datatable(exam_data_2, 
              class = "compact",
              options = list(
                pageLength = 5)
)
```
:::

## [3-1.8.4]{style="color:DarkOrange"} Improving crosstalk Table

The crosstalk table in [Hands-On Exercise 3-1: Section 3-1.8.2](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex03/hands-on_ex03#linked_brushing:_crosstalk_method) has a very long DataTable on the right. This requires horizontal scrolling of the DataTable which is not an ideal user interface design. Therefore, the crosstalk layout has been changed from side-by-side to top-and-bottom by setting width to 12.

::: callout-note
-   Also applied compact class and set the default entity size to 5
-   Used *layout()* control the size of the plot to be a square shape since the axis are equal
-   Used *div()* to control the height allocated to the plot
:::

::: callout-tip
This crosstalk table is more compact and user friendly by showing all the necessary information without unnecessary scrolling!
:::

::: panel-tabset
## Plot

```{r}
#| echo: false
library(htmltools)

d <- highlight_key(exam_data_2)
p <- ggplot(d,
            aes(ENGLISH,
                MATHS)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

gg <- highlight(
  ggplotly(p) %>% layout(height = 300, width = 300),
  "plotly_selected"
)

crosstalk::bscols(
  widths = 12,
  div(style = "height: 300px;", gg),
  DT::datatable(d, 
                class = "compact",
                options = list(pageLength = 5))
)
```

## Code

```{r}
#| eval: false
# library(htmltools)

d <- highlight_key(exam_data_2)
p <- ggplot(d,
            aes(ENGLISH,
                MATHS)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

gg <- highlight(
  ggplotly(p) %>% layout(height = 300, width = 300),
  "plotly_selected"
)

crosstalk::bscols(
  widths = 12,
  div(style = "height: 300px;", gg),
  DT::datatable(d, 
                class = "compact",
                options = list(pageLength = 5))
)
```
:::

## [3-1.9]{style="color:DarkOrange"} Reference

### [3-1.9.1]{style="color:DarkOrange"} ggiraph

This [link](https://davidgohel.github.io/ggiraph/) provides an online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the PDF version of the reference guide.

-   [How to plot with ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)
-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)
-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)
-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to create interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

### [3-1.9.2]{style="color:DarkOrange"} plotly for R

-   [Getting started with Plotly in R](https://plotly.com/r/getting-started/)
-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/)
-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)
-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.
-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.
-   [Getting Started](https://gganimate.com/articles/gganimate.html)
-   This [link](https://rpubs.com/raymondteo/dataviz8) provides a very interesting implementation of gganimate by an SMU senior.
-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/)
-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)