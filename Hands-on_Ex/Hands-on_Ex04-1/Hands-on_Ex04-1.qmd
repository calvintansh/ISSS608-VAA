---
title: "[Hands-On Exercise 4-1:]{style='color:DarkOrange'} Funnel Plots for Fair Comparisons"
date: 2025-05-06
date-modified: "last-modified"
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# [4-1:]{style="color:DarkOrange"} 1 Overview

Funnel plot is a specially designed data visualisation for unbiased comparison between outlets, stores or business entities. The following will be explored in this exercise:

-   Plotting funnel plots using **funnelPlotR** package
-   Plotting static funnel plot with **ggplot2** package
-   plotting interactive funnel plot by using both **plotly R** and **ggplot2** packages

# [4-1:]{style="color:DarkOrange"} 2 Install and Launch R Packages

These four R packages will be used:

1.  **readr**: Import csv to R
2.  **FunnerPlotR**: Create funnel plot
3.  **ggplot2**: Create funnel plot manually
4.  **knitr**: Build static html table
5.  **plotly**: Create interactive funnel plot

```{r}
#| code-fold: true
#| code-summary: "Show code"
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

# [4-1:]{style="color:DarkOrange"} 3 Import Data

The following data will be used for this exercise: COVID-19_DKI_Jakarta. It can be downloaded from [Open Data Covid-19 Provinsi DKI Jakarta portal](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com/). In this exercise, the cumulative COVID-19 cases will be compared to the death by sub-district (i.e. kelurahan) as of 31st July 2021, DKI Jakarta.

First, the data will be imported into R and save it into a tibble data frame object called *covid19*.

```{r}
#| code-fold: true
#| code-summary: "Show code"
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)

kable(head(covid19, 5))
```

# [4-1:]{style="color:DarkOrange"} 4 FunnelPlotR Methods

[**FunnelPlotR**](https://nhs-r-community.github.io/FunnelPlotR/) package uses ggplot to generate funnel plots. It requires `numerator` (events of interest), `denominator` (population considered) and `group`. The key arguments selected for customisation are:

-   `limit`: Plot limits (95 or 99)
-   `label_outliers`: Label outliers (true or false)
-   `Poisson_limits`: Add Poisson limits to the plot
-   `OD_adjust`: Add overdispersed limits to the plot
-   `xrange` and `yrange`: Specify the range to display for axes, acts like a zoom function
-   Other aesthetic components, such as `graph title`, `axis labels` etc.

## [4-1:]{style="color:DarkOrange"} 4.1 to 4.3 FunnelPlotR methods: Basic plot

The code below plots a funnel plots of increasing complexity.

::: panel-tabset

## 4.1 Basic Plot
```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 9
#| fig-height: 6
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`
)
```

::: callout-tip
## Things to Learn

-   `group`: This function is different from its use in a scatterplot. Here, it defines the level of the points to be plotted, ie., Sub-district, District or City. If City is chosen, there are only six data points.
-   `data_type`: The default argument is "SR".
-   `limit`: The accepted values for plot limits are 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution.
:::

::: callout-warning
## Things to Improve

- The scale is wrong, the data is very compressed.
- However, changing yrange results in missing  267 rows containing missing values or values outside the scale. Therefore, to adjust yrange, the data type should be changed to "PR"
:::

## [4-1:]{style="color:DarkOrange"} 4.2 Makeover 1

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 9
#| fig-height: 6
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",
  xrange = c(0, 6500),
  yrange = c(0, 0.05)
)
```

::: callout-tip
## Things to learn

-   `data_type` argument is used to change from default "SR" to "PR" (i.e., proportions).
-   `xrange` and `yrange` are used to set the range of x-axis and y-axis.
:::

::: callout-warning
## Things to Improve

- While the scale is fixed now, the chart title and axis titles are not appropriate.
- The sub-district labels are distracting and do not provide more info into the chart.
:::

## [4-1:]{style="color:DarkOrange"} 4.3 Makeover 2

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 9
#| fig-height: 6
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",
  xrange = c(0, 6500),
  yrange = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by \nCumulative Total Number of Postive Cases",
  x_label = "Cumulative COVID-19 Positive Cases",
  y_label = "Cumulative Fatality Rate"
)
```
:::

::: callout-tip
## Things to Learn

-   `label = NA` argument is to remove the default label outliers feature.
-   `title` argument is used to add plot title.
-   `x_label` and `y_label` arguments are used to add/edit x-axis and y-axis titles.
:::

# [4-1:]{style="color:DarkOrange"} 5 Funnel Plot for Fair Visual Comparison: ggplot2 methods

In this exercise, the funnel plots will be built step-by-step with ggplot2. This explains clearly how ggplot2 can be used to customise specialised data visualisation like the funnel Plot.

## [4-1:]{style="color:DarkOrange"} 5.1 Computing the Basic Derived Fields

To plot the funnel plot from scratch, the following values were calculated:

1.  Derive cumulative death rate
2.  Standard error of cumulative death rate

```{r}
#| code-fold: true
#| code-summary: "Show code"
df <- covid19 %>%
  mutate(rate = Death/Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, *fit.mean* was computed.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

## [4-1:]{style="color:DarkOrange"} 5.2 Calculate lower and upper limits for 95% and 99.9% CI

Lastly, the lower and upper limits for 95% confidence interval was derived.

```{r}
#| code-fold: true
#| code-summary: "Show Code"
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq))
dfCI <- data.frame(number.ll95, number.ul95, 
                   number.ll999, number.ul999,
                   number.seq, fit.mean)
```

::: callout-note
- The 1.96 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 95% confidence interval.
- The 3.29 used in the code above refers to 1.96 standard deviations of the mean and corresponds to a 99.9% confidence interval.
:::

## [4-1:]{style="color:DarkOrange"} 5.3 Plotting a Static Funnel Plot

A static funnel plot was created using **ggplot2** functions.

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 8
#| fig-height: 6
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label = `Sub-district`),
             alpha = 0.4) +
  geom_line(data = dfCI,
            aes(x = number.seq,
                y = number.ll95),
            size = 0.4,
            colour = "skyblue",
            linetype = "dashed") +
  geom_line(data = dfCI,
            aes(x = number.seq,
                y = number.ul95),
            size = 0.4,
            colour = "skyblue",
            linetype = "dashed") +
  geom_line(data = dfCI,
            aes(x = number.seq,
                y = number.ll999),
            size = 0.4,
            colour = "skyblue") +
  geom_line(data = dfCI,
            aes(x = number.seq,
                y = number.ul999),
            size = 0.4,
            colour = 'skyblue') +
  geom_hline(data = dfCI,
             aes(yintercept = fit.mean),
             size = 0.4,
             colour = "grey40") +
  coord_cartesian(ylim=c(0, 0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") +
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") +
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") +
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size = 12),
        legend.position = c(0.91, 0.85),
        legend.title = element_text(size = 7),
        legend.text = element_text(size = 7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p

```

## [4-1:]{style="color:DarkOrange"} 5.4 Interactive funnel plot: `plotly` + `ggplot2`

The funnel plot created using ggplot2 functions above can be made interactive `ggplotly()` from **plotly** R package.

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 8
#| fig-height: 6
fp_ggplotly <- ggplotly(p,
                        tooltip = c("label",
                                    "x",
                                    "y"))
fp_ggplotly
```

# [4-1:]{style="color:DarkOrange"} 6 References

-   [funnelPlotR](https://nhs-r-community.github.io/FunnelPlotR/index.html) package.
-   [Funnel Plots for Indirectly-standardised ratios](https://nhs-r-community.github.io/FunnelPlotR/articles/funnel_plots.html).
-   [Changing funnel plot options](https://nhs-r-community.github.io/FunnelPlotR/articles/changing_funnel_plot_options.html)
-   [ggplot2](https://ggplot2.tidyverse.org/) package.
