{
  "hash": "360fb3f6b2bc1944769623ba802820f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[In-Class Exercise 5:]{style='color:DarkOrange'} Preparation for VAST Mini Mini-Challenge 1 2025\"\ndate: 2025-05-17\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# [2:]{style=\"color:DarkOrange\"} 1 Overview\n\nThis exercise will target to answer one of the three challenges from [VAST 2025](https://vast-challenge.github.io/2025/index.html) which features a fictitious island nation, Oceanus, famous for fishing and quiet seaside communities.\n\nThe chosen challenge is [Mini-Challenge 1](https://vast-challenge.github.io/2025/MC1.html).\n\n## [2:]{style=\"color:DarkOrange\"} 1.1 Background\n\nOne of music’s biggest superstars is Oceanus native Sailor Shift. From humble beginnings, Sailor has grown in popularity and now enjoys fans around the world. Sailor started her career on the island nation of Oceanus which can be clearly seen in her early work, she started in the genre of “Oceanus Folk”. While Sailor has moved away from the traditional Oceanus style, the Oceanus Folk has made a name for itself in the musical world. The popularity of this music is one of the factors driving an increase in tourism to a quiet island nation that used to be known for fishing.\n\nIn 2023, Sailor Shift joined the Ivy Echoes – an all-female Oceanus Folk band consisting of Sailor (vocalist), Maya Jensen (vocalist), Lila “Lilly” Hartman (guitarist), Jade Thompson (drummer), and Sophie Ramirez (bassist). They played together at venues throughout Oceanus but had broken up to pursue their individual careers by 2026. Sailor’s breakthrough came in 2028 when one of her singles went viral, launched to the top of the global charts (something no other Oceanus Folk song had ever done). Since then, she has only continued to grow in popularity worldwide.\n\nSailor has released a new album almost every year since her big break, and each has done better than the last. Although she has remained primarily a solo artist, she has also frequently collaborated with other established artists, especially in the Indie Pop and Indie Folk genres. She herself has branched out musically over the years but regularly returns to the Oceanus Folk genre — even as the genre’s influence on the rest of the music world has spread even more.\n\nSailor has always been passionate about two things: (1) spreading Oceanus Folk, and (2) helping lesser-known artists break into music. Because of those goals, she’s particularly famous for her frequent collaborations.\n\nAdditionally, because of Sailor’s success, more attention began to be paid over the years to her previous bandmates. All 4 have continued in the music industry—Maya as an independent vocalist, Lilly and Jade as instrumentalists in other bands, and Sophie as a music producer for a major record label. In various ways, all of them have contributed to the increased influence of Oceanus folk, resulting in a new generation of up-and-coming Oceanus Folk artists seeking to make a name for themselves in the music industry.\n\nNow, as Sailor returns to Oceanus in 2040, a local journalist – Silas Reed – is writing a piece titled Oceanus Folk: Then-and-Now that aims to trace the rise of Sailor and the influence of Oceanus Folk on the rest of the music world. He has collected a large dataset of musical artists, producers, albums, songs, and influences and organized it into a knowledge graph. Your task is to help Silas create beautiful and informative visualizations of this data and uncover new and interesting information about Sailor’s past, her rise to stardom, and her influence.\n\n## [2:]{style=\"color:DarkOrange\"} 1.2 Tasks and Questions\n\n1.  Design and develop visualizations and visual analytic tools that will allow Silas to explore and understand the profile of Sailor Shift’s career\n\n    -   Who has she been most influenced by over time?\n    -   Who has she collaborated with and directly or indirectly influenced?\n    -   How has she influenced collaborators of the broader Oceanus Folk community?\n\n2.  Develop visualizations that illustrate how the influence of Oceanus Folk has spread through the musical world.\n\n    -   Was this influence intermittent or did it have a gradual rise?\n    -   What genres and top artists have been most influenced by Oceanus Folk?\n    -   On the converse, how has Oceanus Folk changed with the rise of Sailor Shift? From which genres does it draw most of its contemporary inspiration?\n\n3.  Use your visualizations to develop a profile of what it means to be a rising star in the music industry.\n\n    -   Visualize the careers of three artists. Compare and contrast their rise in popularity and influence.\n    -   Using this characterization, give three predictions of who the next Oceanus Folk stars with be over the next five years.\n\n## [2:]{style=\"color:DarkOrange\"} 1.3 Data Source\n\nThe data for this exercise is from [VAST 2025 MC1](https://github.com/vast-challenge/2025-data/blob/main/MC1_release.zip).\n\n## [2:]{style=\"color:DarkOrange\"} 1.4 Data Description\n\nGraph Description - Directed Multigraph - \\# nodes: 17,412 - \\# edges: 37, 857 - 18 connected components - Possible node types are: {Person, Song, RecordLabel, Album, MusicalGroup} - Possible edge types are: {MemberOf, PerformerOf, ComposerOf, ProducerOf, LyricistOf, InStyleOf, InterpolatesFrom, CoverOf, LyricalReferenceTo, DirectlySamples, RecordedBy, DistributedBy} - The graph format is a JSON file. The root-level JSON object consists of graph-level properties specifying that it is directed and a multigraph, a “nodes” key which holds the list of nodes, and a “links” key which holds the list of edges.\n\nThe data for this challenge comes from two different sources:\n\n-   an online, crowdsourced repository of musical influence, where contributors have manually notated instances in which songs or albums have sampled, covered, or otherwise drawn inspiration from previous work.\n-   aggregate-level descriptions of song popularity, as labeled by our journalist, Silas Reed. These notations (notable and notoriety_date) are directly based on both the number of sales and streams that the song/album has achieved as well as the whether or not the work landed on a top record chart.\n\n## [1-1:]{style=\"color:DarkOrange\"} 1.5 Install and Load the Required Libraries\n\nThe code chunk below, p_load() of pacman package is used to load the R packages into R environmen.\n\n::: {.callout-note appearance=\"minimal\" collapse=\"true\"}\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\npacman::p_load(tidyverse, jsonlite,\n                SmartEDA, tidygraph,\n                ggraph)\n```\n:::\n\n\n:::\n\n## [1-1:]{style=\"color:DarkOrange\"} 1.6 Importing Data\n\nFor the purpose of this exercise, a data file called *MC1_graph* will be used. The code chunk below imports *respopagesex2024.csv* into R environment by using *read_csv()* function of *readr* package (under *tidyverse*).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nkg <- fromJSON(\"data/MC1_graph.json\")\nglimpse(kg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ...\n```\n\n\n:::\n:::\n\n\n\n### Inspect Structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(kg, max.level = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n### Extract and Inspect\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(kg$nodes)\n\nglimpse(nodes_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 17,412\nColumns: 10\n$ `Node Type`    <chr> \"Song\", \"Person\", \"Person\", \"Person\", \"RecordLabel\", \"S…\n$ name           <chr> \"Breaking These Chains\", \"Carlos Duffy\", \"Min Qin\", \"Xi…\n$ single         <lgl> TRUE, NA, NA, NA, NA, FALSE, NA, NA, NA, NA, TRUE, NA, …\n$ release_date   <chr> \"2017\", NA, NA, NA, NA, \"2026\", NA, NA, NA, NA, \"2020\",…\n$ genre          <chr> \"Oceanus Folk\", NA, NA, NA, NA, \"Lo-Fi Electronica\", NA…\n$ notable        <lgl> TRUE, NA, NA, NA, NA, TRUE, NA, NA, NA, NA, TRUE, NA, N…\n$ id             <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ written_date   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"2020\", NA, NA,…\n$ stage_name     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ notoriety_date <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- as_tibble(kg$links)\n\nglimpse(edges_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 37,857\nColumns: 4\n$ `Edge Type` <chr> \"InterpolatesFrom\", \"RecordedBy\", \"PerformerOf\", \"Composer…\n$ source      <int> 0, 0, 1, 1, 2, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5…\n$ target      <int> 1841, 4, 0, 16180, 0, 16180, 0, 5088, 14332, 11677, 2479, …\n$ key         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n\n\n:::\n:::\n\n\n\n# [2:]{style=\"color:DarkOrange\"} 2 Exploratory Data Analysis (EDA)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl,\n       aes(y = `Edge Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Creating knowledge graph\n\n### Step 1: Mapping from node it to row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                index = seq_len(\n                  nrow(nodes_tbl)))\nid_map\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17,412 × 2\n      id index\n   <int> <int>\n 1     0     1\n 2     1     2\n 3     2     3\n 4     3     4\n 5     4     5\n 6     5     6\n 7     6     7\n 8     7     8\n 9     8     9\n10     9    10\n# ℹ 17,402 more rows\n```\n\n\n:::\n:::\n\n\n\nThis ensures each id from your node list is mapped to the correct row number\n\n### Step 2: Map source and target IDs to row indices\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n\nedges_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 37,857 × 6\n   `Edge Type`      source target   key  from    to\n   <chr>             <int>  <int> <int> <int> <int>\n 1 InterpolatesFrom      0   1841     0     1  1842\n 2 RecordedBy            0      4     0     1     5\n 3 PerformerOf           1      0     0     2     1\n 4 ComposerOf            1  16180     0     2 16181\n 5 PerformerOf           2      0     0     3     1\n 6 ProducerOf            2  16180     0     3 16181\n 7 PerformerOf           3      0     0     4     1\n 8 InterpolatesFrom      5   5088     0     6  5089\n 9 InStyleOf             5  14332     0     6 14333\n10 InterpolatesFrom      5  11677     0     6 11678\n# ℹ 37,847 more rows\n```\n\n\n:::\n:::\n\n\n\n### Step 3: Filter out any unmatched (invalid) edges\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n### Step 4: Creating the graph\n\nLastly, `tbl_graph()` is used to create tidygraph's graph object by using the code chunk below\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = kg$directed)\n```\n:::\n\n\n\n## Visualising the knowledge graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n### Visualising the whole graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = 'fr') +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n:::\n\n\n\n### Step 1: Filter edge to only \"MemberOf\"\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>%\n  filter(`Edge Type` == \"MemberOf\")\n\ngraph_memberof\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17412 nodes and 568 edges\n#\n# A rooted forest with 16844 trees\n#\n# Edge Data: 568 × 6 (active)\n    from    to `Edge Type` source target   key\n   <int> <int> <chr>        <int>  <int> <int>\n 1     8 16882 MemberOf         7  16881     0\n 2     9 16882 MemberOf         8  16881     0\n 3    68 16840 MemberOf        67  16839     0\n 4    83 16801 MemberOf        82  16800     0\n 5    84 16801 MemberOf        83  16800     0\n 6    91 16817 MemberOf        90  16816     0\n 7   100 16891 MemberOf        99  16890     0\n 8   108 16876 MemberOf       107  16875     0\n 9   110 16876 MemberOf       109  16875     0\n10   150 16757 MemberOf       149  16756     0\n# ℹ 558 more rows\n#\n# Node Data: 17,412 × 10\n  `Node Type` name          single release_date genre notable    id written_date\n  <chr>       <chr>         <lgl>  <chr>        <chr> <lgl>   <int> <chr>       \n1 Song        Breaking The… TRUE   2017         Ocea… TRUE        0 <NA>        \n2 Person      Carlos Duffy  NA     <NA>         <NA>  NA          1 <NA>        \n3 Person      Min Qin       NA     <NA>         <NA>  NA          2 <NA>        \n# ℹ 17,409 more rows\n# ℹ 2 more variables: stage_name <chr>, notoriety_date <chr>\n```\n\n\n:::\n:::\n\n\n\n### Step 2: Extract only connected nodes (i.e., use in these edges)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n\nused_node_indices\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1]     8     9    68    83    84    91   100   108   110   150   151   163\n [13]   191   222   223   224   237   297   304   356   441   442   443   444\n [25]   456   457   546   547   560   561   562   563   565   567   568   595\n [37]   613   615   628   629   634   635   677   679   708   768   769   770\n [49]   845   873   874   879   883   884   942   944   968   969   988  1053\n [61]  1054  1067  1080  1085  1087  1090  1091  1094  1095  1104  1142  1143\n [73]  1144  1181  1183  1198  1199  1201  1203  1220  1221  1262  1264  1271\n [85]  1274  1276  1277  1278  1336  1337  1347  1348  1349  1438  1439  1442\n [97]  1443  1445  1446  1475  1491  1492  1493  1494  1495  1498  1535  1536\n[109]  1542  1576  1580  1613  1615  1616  1663  1665  1717  1719  1720  1744\n[121]  1775  1776  1778  1779  1816  1817  1819  1821  1859  1882  1883  1913\n[133]  1919  1929  1930  1993  1994  1995  1996  2005  2007  2046  2070  2071\n[145]  2281  2282  2283  2329  2330  2345  2346  2347  2364  2389  2390  2427\n[157]  2459  2461  2507  2509  2510  2517  2518  2536  2538  2592  2593  2635\n[169]  2636  2637  2638  2651  2652  2773  2774  2781  2783  2873  2878  2879\n[181]  2933  2979  2982  3015  3016  3069  3071  3108  3156  3158  3165  3166\n[193]  3167  3176  3177  3178  3337  3361  3367  3378  3380  3414  3503  3504\n[205]  3505  3545  3546  3666  3667  3674  3675  3713  3718  3752  3753  3754\n[217]  3755  3762  3765  3775  3776  3821  3822  3842  3844  3847  3848  3895\n[229]  3896  4010  4011  4012  4074  4076  4077  4093  4126  4132  4135  4142\n[241]  4145  4146  4147  4256  4257  4258  4259  4260  4285  4286  4318  4320\n[253]  4348  4350  4352  4356  4357  4395  4396  4398  4434  4435  4446  4495\n[265]  4496  4504  4567  4568  4569  4570  4573  4574  4575  4578  4580  4609\n[277]  4665  4666  4683  4684  4703  4704  4730  4731  4732  4733  4754  4756\n[289]  4757  4777  4817  4820  4937  5017  5025  5027  5049  5050  5115  5118\n[301]  5119  5187  5188  5259  5267  5310  5361  5367  5368  5369  5371  5403\n[313]  5405  5460  5543  5545  5555  5558  5559  5646  5647  5728  5729  5806\n[325]  5807  5808  5862  5866  5870  5974  5975  5977  5979  5989  5991  6031\n[337]  6033  6038  6040  6053  6054  6056  6057  6199  6270  6271  6317  6318\n[349]  6465  6466  6471  6526  6529  6535  6566  6567  6568  6569  6606  6635\n[361]  6668  6669  6890  6891  6892  6951  6953  7044  7045  7155  7157  7180\n[373]  7215  7216  7218  7219  7253  7388  7463  7464  7465  7514  7516  7565\n[385]  7570  7571  7617  7618  7711  7853  7865  7866  7888  7889  7938  8131\n[397]  8137  8192  8195  8197  8200  8249  8251  8254  8265  8266  8267  8272\n[409]  8273  8287  8288  8290  8291  8313  8314  8382  8447  8448  8467  8468\n[421]  8469  8610  8612  8614  8753  9032  9033  9179  9180  9195  9200  9211\n[433]  9214  9368  9369  9381  9384  9385  9443  9445  9509  9510  9511  9594\n[445]  9596  9634  9636  9643  9644  9772 10224 10225 10348 10452 10453 10555\n[457] 10556 10661 10662 10743 10745 10746 10795 10799 10962 11016 11017 11018\n[469] 11130 11322 11616 11982 11983 11984 12054 12057 12083 12338 12527 12528\n[481] 12625 12815 12816 12993 13286 13852 16941 16942 16943 16949 16950 16951\n[493] 16952 16959 16960 16984 16985 16986 16987 16994 16995 16996 17021 17022\n[505] 17031 17032 17042 17043 17044 17045 17046 17055 17056 17057 17062 17063\n[517] 17070 17071 17090 17091 17098 17099 17100 17108 17109 17110 17119 17120\n[529] 17136 17137 17138 17165 17166 17167 17190 17191 17192 17206 17207 17227\n[541] 17228 17229 17230 17241 17242 17243 17249 17250 17256 17257 17258 17259\n[553] 17260 17296 17297 17298 17299 17310 17311 17312 17313 17314 17324 17325\n[565] 17326 17327 17350 17356 16882 16840 16801 16817 16891 16876 16757 16895\n[577] 16768 16835 16834 16750 16862 16814 16771 16766 16791 16807 16915 16928\n[589] 16900 16836 16780 16887 16846 16859 16747 16755 16934 16847 16837 16861\n[601] 16927 16804 16802 16877 16758 16890 16754 16752 16809 16808 16905 16774\n[613] 16761 16794 16911 16773 16811 16819 16833 16798 16782 16844 16937 16765\n[625] 16762 16746 16931 16787 16933 16827 16841 16851 16813 16756 16883 16745\n[637] 16748 16826 16749 16767 16793 16930 16872 16778 16921 16868 16763 16917\n[649] 16831 16902 16884 16894 16799 16897 16874 16832 16815 16806 16776 16805\n[661] 16893 16849 16779 16850 16903 16912 16777 16824 16920 16800 16786 16839\n[673] 16919 16885 16842 16829 16775 16848 16936 16822 16823 16753 16916 16789\n[685] 16914 16852 16803 16816 16865 16810 16759 16857 16913 16881 16879 16924\n[697] 16772 16909 16906 16843 16845 16764 16853 16901 16860 16856 16892 16812\n[709] 16888 16818 16899 16904 16878 16792 16830 16781 16922 16751 16908 16886\n[721] 16795 16863 16867 16923 16938 16866 16838 16858 16760 16820 16880 16875\n[733] 16910 16896 16854 16935 16785 16796 16871 16783 16770 16926 16790 16907\n[745] 16828 16769 16825 16797 16925 16929 16932 16869 16864 16889 16784 16940\n[757] 16870 16918 16821 16873 16788 16898 16855 16939 16944 16953 16961 16988\n[769] 16997 17023 17033 17047 17058 17064 17072 17092 17101 17111 17121 17139\n[781] 17168 17193 17208 17231 17244 17251 17261 17300 17315 17328 17362\n```\n\n\n:::\n:::\n\n\n\n### Step 3: Keep only those nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_node_indices) %>%\n  select(-row_id)\n```\n:::\n\n\n\n### Step 4: Plot the sub-graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(colour = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex05_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex05_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}