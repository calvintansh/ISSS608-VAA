{
  "hash": "61995c5fd1e59cdadee0e91886edf60f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[Hands-On Exercise 4-2:]{style='color:DarkOrange'} Visualising Distribution\"\ndate: 2025-05-07\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n\n# [4-2:]{style=\"color:DarkOrange\"} 1 Learning Outcome\n\nVisualising distribution is not new in statistical analysis. The popular statistical graphics methods for visualising distribution, such as histogram, probability density curve (pdf), boxplot, notch plot and violin plot, and how they can be created using ggplot2 can be found in [Hands-On Exercise 1](https://isss608-ay2024-25t3.netlify.app/hands-on_ex/hands-on_ex01/hands-on_ex01). In this exercise will focus on two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot using ggplot2 and its extensions.\n\n# [4-2:]{style=\"color:DarkOrange\"} 2 Getting Started\n\n## [4-2:]{style=\"color:DarkOrange\"} 2.1 Installing and Loading Packages\n\nThe following R packages will be used for this exercise:\n\n-   **ggridges**: A ggplot2 extension specially designed for plotting ridgeline plots\n-   **ggdist**: A ggplot2 extension specially designed for visualising distribution and uncertainty\n-   **tidyverse**: A family of R packages to meet the modern data science and visual communication needs\n-   **ggthemes**: A ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package\n-   **colorspace**: An R package providing a broad toolbox for selecting individual colours or colour palettes, manipulating these colours, and employing them in various kinds of visualisations.\n- **patchwork**: an R package for preparing composite figure created using ggplot2\n\nThe code chunk below will be used to load these R packages into the RStudio environment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse, patchwork)\n```\n:::\n\n\n\n\n## [4-2:]{style=\"color:DarkOrange\"} 2.2 Data Import\n\nFor the purpose of this exercise, *Exam_data.csv* will be used.\n\nIn the code chunk below, [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) of [**readr**](https://readr.tidyverse.org/) package is used to import *Exam_data.csv* into R and saved it into a tibble data.frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n\n# [4-2:]{style=\"color:DarkOrange\"} 3 Visualising Distribution with Ridgeline Plot\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nThe figure below is a ridgelines plot showing the distribution of English scores by class.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 2.5,\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0,0),\n  ) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add=c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n::: callout-note\n## Note\n\n-   Ridgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take too much space. Indeed, the fact that groups overlap each other allows for more more efficient space usage. If you have less than 5 groups, dealing with other distribution plots is probably better.\n\n-   It works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot that does not provide any insight.\n:::\n\n## [4-2:]{style=\"color:DarkOrange\"} 3.1 Plotting ridgeline Graph: ggridges Method\n\nThere are several ways to plot ridgeline plots with R. In this section, the [ggridges](https://wilkelab.org/ggridges/index.html) package will be used to plot ridgeline plots.\n\nggridges package provides two main geom to plot ridgeline plots. They are: `grom_ridgeline()` and `geom_density_ridges()`. The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n## [4-2:]{style=\"color:DarkOrange\"} 3.2 Varying Fill Colours Along the X-Axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid colour but rather with colours that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html).\n\nBoth geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colours. However, they do not allow for alpha transparency in the fill. For technical reasons, it can either be changing fill colours or transparency but not both.\n\n::: callout-note\nThe available [colours](https://sjmgarnier.github.io/viridis/reference/scale_viridis.html) are \"A\" to \"H\".\n:::\n\n::: panel-tabset\n\n## Plasma\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") + # Available options are A to H\n  scale_x_continuous(name = \"English grades\",\n                     expand = c(0,0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n    theme_ridges() +\n  ggtitle('Plasma')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Others 1\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Others 2\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## [4-2:]{style=\"color:DarkOrange\"} 3.3 Mapping the Probabilities Directly onto Colour\n\nBesides providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called `stat_density_ridges()` that replaces `stat_density()` of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n## scale_fill_viridis_b\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_b(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## scale_fill_viridis_c\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = ENGLISH, y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom=\"density_ridges_gradient\",\n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: callout-tip\n- scale_fill_viridis_b / c controls how granular the colours are mixed\n- scale_fill_viridis_d is for discrete variables\n:::\n\n\n## [4-2:]{style=\"color:DarkOrange\"} 3.4 Ridgeline Plots with Quantile Lines\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the first figure below.\n\nOr, instead of using number to define the quantiles, we can also specify quantiles by cutting points such as 2.5% and 97.5% tails to colour the ridgeline plot, shown in the second figure below.\n\n::: panel-tabset\n## 4 Quantiles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"Density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quantiles\") +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Manual Quantiles\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show Code\"}\nggplot(exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE,\n    quantiles = c(0.025, 0.975)\n  ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n# [4-2:]{style=\"color:DarkOrange\"} 4 Visualsing Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a \"raincloud\". The raincloud (half-density) plot enhances the traditional boxplot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nIn this section, a raincloud plot will be created to visualise the distribution of English score by Race. It will be created by using functions provided by **ggdist** and ggplot2 packages.\n\n## [4-2:]{style=\"color:DarkOrange\"} 4.1 Plotting a Half Eye Graph\n\nFirst, a Half-Eye graph will be plotted by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualisation, which contains a half-density and a slab-interval.\n\n::: panel-tabset\n## Plot (with slab interval)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n## Plot (without slab interval)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: callout-tip\n## Things to Learn\n\nThe slab interval was removed by setting .width = 0 and point_colour = NA.\n:::\n\n## [4-2:]{style=\"color:DarkOrange\"} 4.2 Adding Boxplot with `geom_boxplot()`\n\nNext, the second geometry layer will be added using `geom_boxplot()` of ggplot2. This produces a narrow boxplot. The width will be reduced and the opacity will be adjusted.\n\n::: callout-note\nBut it seems that opacity of boxplot cannot be adjusted using alpha.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n## [4-2:]{style=\"color:DarkOrange\"} 4.3 Adding Dot plot with `stat_dots`\n\nNext, the third geometry layer will be added using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = \"left\" to indicate we want it on the **left-hand side**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n## [4-2:]{style=\"color:DarkOrange\"} 4.4 Finishing Touch\n\nLastly, [`coord_flit()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## Improved Plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n## Original Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = RACE,\n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\",\n            justification = 1.2,\n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: callout-tip\nThe bin width is an important variable and resulted in the first graph having points clipped out due to coord_flip(). This can be left empty to let the graph decide automatically.\n:::\n\n# [4-2:]{style=\"color:DarkOrange\"} 5 Reference\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).\n-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \\[version 2; peer review: 2 approved\\]. Welcome Open Res 2021, pp. 4:63.\n-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)",
    "supporting": [
      "Hands-on_Ex04-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}