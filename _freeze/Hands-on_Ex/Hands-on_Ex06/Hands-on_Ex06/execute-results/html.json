{
  "hash": "870a6650eb9f5c84404d39eb157b8911",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"[Hands-On Exercise 6:]{style='color:DarkOrange'} Visualising and Analysing Time-oriented Data\"\ndate: 2025-05-21\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# [6:]{style=\"color:DarkOrange\"} 1 Learning Objectives\n\nIn this chapter, following visualisations will be covered:\n\n-   Plotting a calender heatmap using ggplot2 functions\n-   Plotting a cycle plot using ggplot2 functions\n-   Plotting a slopegraph\n-   Plotting a horizon chart\n\n# [6:]{style=\"color:DarkOrange\"} 2 Getting Started\n\nTo install and launch the following R packages:\n\n- scales\n- viridis\n- lubridate\n- ggthemes\n- gridExtra\n- readxl\n- knitr\n- data.table\n- tidyverse\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse)\n```\n:::\n\n\n\n# [6:]{style=\"color:DarkOrange\"} 3 Plotting Calendar Heatmap\n\nBelow is an example of a calender heatmap plotted programmatically by using ggplot2 package.\n\n![](image/image01.png){fig-align=\"center\" width=\"800\"}\n\n\nWithin this section, the following will be covered:\n\n-   plot a calendar heatmap by using ggplot2 functions and extension\n-   write functions using R programming\n-   derive specific date and time related field using base R and lubridate packages\n-   perform data preparation task by using tidyr and dplyr packages\n\n## [6:]{style=\"color:DarkOrange\"} 3.1 The Data\n\n The *eventlog.csv* file will be used for this exercise. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n## [6:]{style=\"color:DarkOrange\"} 3.2 Importing the Data\n\nThe code chunk below imports *eventlog.csv* into the R environment and calls this data frame *attacks*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 3.3 Examining the Data Structure\n\nThe code chunk below will be used to examine the imported data frame before further analysis is performed. The function *kable()* is used to review the structure of the imported data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n\nThere are 3 columns: *timestamp*, *source_country*, and *tz*.\n\n-   *timestamp:* Stores data-time values in POSIXct format\n-   *source_country:* Stores the source of the attack. It is in *ISO3166-1 alpha-2* country code\n-   *tz:* Stores time zone of the source IP address\n\n## [6:]{style=\"color:DarkOrange\"} 3.4 Data Preparation\n\n##### Step 1: Deriving *weekday* and *hour of day* fields\n\nTwo new fields namely *wkday* and *hour* needs to be derived before plotting the calendar heatmap. The code chunk below contains the function to perform this task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts,\n                        tz = tz[1],\n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n\n::: callout-note\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\n##### Step 2: Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\n::: callout-note\nBeside extracting the necessary data into the *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they will be ordered when plotting.\n:::\n\nThe table below shows the tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 3.5 Building the Calendar Heatmap\n\nThe values every combination is available and there is no need to further process the data. The calendar heatmap will be created by grouping the count by hour and wkday and plotting it.The code chunk below is used to build the calendar heatmap. \n\n::: panel-tabset\n## theme_tufte()\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n## Default Theme\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: callout-tip\n## Things to Learn\n-   A tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.\n-   A new field called *n* is derived by using `group_by()` and `count()` functions.\n-   `na.omit()` is used to exclude missing values.\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border colour and line size of the tiles.\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. \n    - There is a dashed line around the default plot that is removed by using theme_tufte.\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n-   `scale_fill_gradient()` function is used to create a **two colour gradient** (low-high).\n:::\n\n\n## [6:]{style=\"color:DarkOrange\"} 3.6 Building Multiple Calendar Heatmaps\n\n**Challenge:** Build multiple heatmaps for the top four countries with the highest number of attacks. An example of the desired graph is below.\n\n![](image/image02.png){fig-align=\"center\" width=\"800\"}\n\n\n\n##### Step 1: Derive number of attacks by country object\n\nTo identify the top 4 countries with the highest attack numbers, the code below will achieve the following:\n\n-   Count the number of attacks by country\n-   Calculate the percentage of attacks by country\n-   Save the result in a tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n##### Step 2: Prepare the tidy data frame\n\nThe code below extracts the top 4 countries from *attacks* data frame and saves the data in a new tibble data frame *top4_attacks*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n##### Step 3: Plot the multiple calendar heatmap using the ggplot2 package\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n\n\n# [6:]{style=\"color:DarkOrange\"} 4 Plotting Cycle Plot\n\nThis section will cover plotting a cycle plot showing time-series patterns and trend of visitor arrivals from Vietnam programmatically using ggplot2 functions. An example of the resulting plot is given below.\n\n![](image/image03.png){fig-align=\"center\" width=\"800\"}\n\n## [6:]{style=\"color:DarkOrange\"} 4.1 Step 1: Data Import\n\nThe dataset *arrivals_by_air.xlsx* will be used for this exercise. The code chunk below imports it using `read_excel()` of the **readxl** package and saves it as a tibble data frame called *air*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 4.2 Step 2: Deriving Month and Year Fields\n\nThe columns *month* and *year* are derived from the *Month-Year* field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nair$month <- factor(month(air$'Month-Year'),\n                    levels = 1:12,\n                    labels = month.abb,\n                    ordered = TRUE)\nair$year <- year(ymd(air$'Month-Year'))\n```\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 4.3 Step 3: Extracting the Target Country\n\nNext, the code chunk below is use to extract data for the target country Vietnam.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 4.4 Step 4: Compute year avg arrival by month**\n\nThe average arrival by month across the years will be computed using `group_by()` and `summarise()` from **dplyr**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nhline.data <- Vietnam %>%\n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 4.5 Plotting the cycle plot\n\nThe code chunk below plots the cycle plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-16-1.png){width=2880}\n:::\n:::\n\n\n\n# [6:]{style=\"color:DarkOrange\"} 5 Plotting Slopegraph\n\nThis section will cover plotting a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) using R.\n\n::: callout-note\n\n- Ensure **CGPfunctions** has been installed and loaded onto R environment. \n- Refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function\n- More information about `newggslopegraph()` and its arguments can be found in this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n:::\n\n## [6:]{style=\"color:DarkOrange\"} 5.1 Step 1: Data Import\n\nThe code chunk below is used to import the rice data set into the R environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nrice <- read_csv(\"data/rice.csv\")\n\nkable(head(rice))\n```\n\n::: {.cell-output-display}\n\n\n|Country | Year| Yield| Production|\n|:-------|----:|-----:|----------:|\n|China   | 1961| 20787|   56217601|\n|China   | 1962| 23700|   65675288|\n|China   | 1963| 26833|   76439280|\n|China   | 1964| 28289|   85853780|\n|China   | 1965| 29667|   90705630|\n|China   | 1966| 31445|   98403990|\n\n\n:::\n:::\n\n\n\n## [6:]{style=\"color:DarkOrange\"} 5.2 Step 2: Plotting the slopegraph\n\nThe code chunk below will be used to plot a basic slopegraph.\n\n::: panel-tabset\n\n## Improved Plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Calvin Tan\",\n                DataTextSize = 2,\n                DataLabelLineSize = 0.2,\n                DataLabelFillColor = \"lightblue\") +\n  theme_hc() +\n  theme(legend.position = \"none\",\n        axis.text.y = element_text(size = 6, color = \"black\")) +\n  labs(y = \"Rice Yield\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-18-1.png){width=768}\n:::\n:::\n\n\n\n## Default Plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n:::\n\n::: callout-tip\n## Thing to learn \n\nFor effective data visualisation design, `factor()` is used to convert the value type of *Year* field from numeric to factor.\n:::",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}